% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write.R
\name{write}
\alias{write}
\alias{.DollarNames.write_function_subset}
\title{Write data from \R in files in different formats}
\usage{
write(
  data,
  file = "data",
  ncolumns = if (is.character(data)) 1 else 5,
  append = FALSE,
  sep = " ",
  type = NULL,
  fun_list = NULL,
  x,
  ...
)

\method{.DollarNames}{write_function_subset}(x, pattern = "")
}
\arguments{
\item{data}{An object to write in a file. The accepted class depends on what
the delegated function expects (in many cases, a \code{data.frame} or \code{tibble} is
just fine). If \code{type} is not provided, a \code{data.frame} is \strong{not} suitable
because only an atomic vector can be provided. Give a \code{matrix} instead, if
you want to write tabular data, or provide \code{type = "txt"} for instance.}

\item{file}{The path to the file to write to. If \code{type} is not provide, a
connection, or a character string naming the file to write to. If \verb{""``, print to the standard output connection. If it is }"|cmd"\verb{, the output is piped to the command given by }cmd`.}

\item{ncolumns}{The number of columns to write the data in when \code{type} is
provided, this is by-passed.}

\item{append}{If \code{TRUE} and \code{type} is not provided, the \code{data} are appended
to the connection.}

\item{sep}{A string used to separate columns. Using \code{sep = "\\t"} gives tab
delimited output; default is \code{" "} when \code{type} is not provide, or the default
provided by the delegated function if this parameter is present there.}

\item{type}{The type (format) of data to read.}

\item{fun_list}{The table with correspondence of the types, read, and write
functions.}

\item{x}{Same as \verb{data=}, for compatibility with \code{base::write()}. Please, do
not use both \verb{data=} and \verb{x=} as the same time, or an error will be
generated.}

\item{...}{Further arguments passed to the write function, when \code{type} is
explicitly provided.}

\item{pattern}{A regular expression to list matching names.}
}
\value{
\code{data} is returned invisibly (on the contrary to \code{\link[base:write]{base::write()}}
which returns \code{NULL}).
}
\description{
Write \R data into a file, in different formats.
}
\details{
This function is designed to be fully compatible with
\code{\link[base:write]{base::write()}}, while allowing to specify \code{type} also, and get a more
interesting behavior in this case. Hence, when \code{type} is \strong{not} provided,
either with \code{write(type = ...)}, or \code{write$...()}, the default code is used
and a plain text file wit fields separated by spaces (be default) is written.
When type is provided, then the exportation is delegated to specific
functions (see \code{\link[=data_types]{data_types()}}) to write the data in different formats.
}
\examples{
# Always specify type to delegate to more sophisticated functions
# (type = NULL explicitly indicated meaning: "guess from file extension")
urchin <- read("urchin_bio", package = "data.io")
write(urchin, "urchin_temporary.csv", type = NULL)
# To use a format more easily readable by Excel
write(urchin, "urchin_temporary.csv", type = "xlcsv")
# ... equivalently (and more compact)
write$xlcsv(urchin, "urchin_temporary.csv")
# Tidy up
unlink("urchin_temporary.csv")

# Write in Excel format
write$xlsx(urchin, "urchin_temporary.xlsx")
# Tidy up
unlink("urchin_temporary.xlsx")

# Use base::write() code to output atomic vectors (and matices) in text files
# when you don't specify type=
mat1 <- matrix(1:12, nrow = 4)
# To get a similar presentation in the file, you have to do:
write(t(mat1), "my_temporary_data.txt", ncolumns = 3)
file.show("my_temporary_data.txt")
# Tidy up
unlink("my_temporary_data.txt")
rm(mat1)
}
\seealso{
\code{\link[=data_types]{data_types()}}, \code{\link[=read]{read()}}, \code{\link[=write_csv]{write_csv()}}, \code{\link[base:write]{base::write()}}
}
\author{
Philippe Grosjean \href{mailto:phgrosjean@sciviews.org}{phgrosjean@sciviews.org}
}
\concept{write and export data}
\keyword{utilities}
