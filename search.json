[{"path":[]},{"path":"https://www.sciviews.org/data.io/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://www.sciviews.org/data.io/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://www.sciviews.org/data.io/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://www.sciviews.org/data.io/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://www.sciviews.org/data.io/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement phgrosjean@sciviews.org. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://www.sciviews.org/data.io/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://www.sciviews.org/data.io/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://www.sciviews.org/data.io/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://www.sciviews.org/data.io/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://www.sciviews.org/data.io/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://www.sciviews.org/data.io/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://www.sciviews.org/data.io/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Philippe Grosjean Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://www.sciviews.org/data.io/TODO.html","id":null,"dir":"","previous_headings":"","what":"data.io To Do list","title":"data.io To Do list","text":"always convert ts mts objects data frames? + see co2, nottem, pastecs::marbio, pastecs::marphy, pastecs::releve. Also see tidyr::, tidyr::population, vegan::BCI, vegan::mite, vegan::varespec, UsingR::babies, ca::wg93, faraway::eggs, mlbench::PimaIndianDiabetes2 Reimplement options(data.io.lang = \"xx\") options(SciViews.lang = \"xx\"), make changes SciViews packages (option solely {data.io} indeed). Check {units} package verify conflicts , better, use . Make sure one use units(x) ans units(x) <- value another form vectors. Implement .DollarNames() get list read() write() types available, mechanism add types additional packages (completion R RStudio read$ write$). easier form indicate labels units Allow data transformation store info ‘transfo’ attribute. instance, transforming “size [mm]” using log1p() something like transfo(data = df, logsize = log1p(size)) produce transfo = \"log1p\" attribute logsize. label used plots, get “log(size [mm] + 1)”. Also backtransfo() function back transform variables. dictionary() function constructs data dictionary labelled dataset (probably need attributes ). contain something like: name, label, units, transformation, type, dimensions, missing, examples, comment. Prefer data.table::fread() data.table::fwrite() CSV files. {readr}, append attributes “spec” “problems” object, store elsewhere (?) Use ‘fst’ package + ‘qs’ + ‘vroom’. Look support ‘datapackage.r’. reimport print.subsettable() {svMisc} label versus comment dataframe? Rework modularize read() function. rio::characterize() factorize() SPSS SAS datasets + {rio}. Add recognized classes (‘Date’, ‘time’, etc.) headers (+ abbrev?) make iris.csvy, iris.csvy.zip, iris.sas7bdat iris.syd working: add ‘foreign’ functions & ‘csvy’. Functions write headers : write() -> read() restore object! Integrate {units} {quantities}, {convertr}, {prettyunits} {units} packages. smaller example read(), detail cases vignette instead. tests! {revdep}, see instance, https://github.com/hadley/nycflights13","code":""},{"path":"https://www.sciviews.org/data.io/articles/data-io.html","id":"datasets-in-r-packages","dir":"Articles","previous_headings":"","what":"Datasets in R packages","title":"SciViews datasets and read()/write() functions","text":"several datasets spread various R packages, clear convention name , variables, units use (metric units, ones use imperial unit system). , propose set data, partly converted packages, partly new ones, respect following conventions: English variable names, snake_case names, datasets variables, Uppercase factor levels (less strict), data frames converted according user preferences indicated options(SciViews.as_dtx = ...). default as_dtt converts data.table. options as_dtf concert base R data.frame objects, as_dtbl convert {tibble}’s tbl_df objects. variables label attribute meaningful (short) description variables, units attribute, applicable. origin data recorded src attribute comment R package dataset, srcfile attribute comment read file. instance, iris dataset {datasets} package uses names variables like Petal.Length follow rules exposed . Getting dataset data.io::read(), names “corrected”. Labels units also automatically added. str() one can see labels units added variable: comment gives general information dataset. French supported . Labels comments French: datasets form R packages can loaded read(\"<dataset_name>\", package = \"<package_name>\"), small subset datasets labels units automatically set. listed man page ?Datasets. Another feature conversion quantitative variables SI unit system, case expressed imperial system use US. example trees dataset, {datasets} package whose lengths inches feet volume cubic feet. dataset loaded read(), units converted meters cubic meters (also Girth replaced diametersince really diameter tree reported). got result using lang = \"fr\". want original data, still can use data(), course. , comparison:","code":"library(data.io) # Instead of data(iris), we use: iris <- read(\"iris\", package = \"datasets\") head(iris) #>    sepal_length sepal_width petal_length petal_width species #>           <num>       <num>        <num>       <num>  <fctr> #> 1:          5.1         3.5          1.4         0.2  setosa #> 2:          4.9         3.0          1.4         0.2  setosa #> 3:          4.7         3.2          1.3         0.2  setosa #> 4:          4.6         3.1          1.5         0.2  setosa #> 5:          5.0         3.6          1.4         0.2  setosa #> 6:          5.4         3.9          1.7         0.4  setosa str(iris) #> Classes 'data.table' and 'data.frame':   150 obs. of  5 variables: #>  $ sepal_length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #>   ..- attr(*, \"label\")= chr \"Length of the sepals\" #>   ..- attr(*, \"units\")= chr \"cm\" #>  $ sepal_width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #>   ..- attr(*, \"label\")= chr \"Width of the sepals\" #>   ..- attr(*, \"units\")= chr \"cm\" #>  $ petal_length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #>   ..- attr(*, \"label\")= chr \"Length of the petals\" #>   ..- attr(*, \"units\")= chr \"cm\" #>  $ petal_width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #>   ..- attr(*, \"label\")= chr \"Width of the petals\" #>   ..- attr(*, \"units\")= chr \"cm\" #>  $ species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"label\")= chr \"Iris species\" #>  - attr(*, \"comment\")= chr [1:2] \"The 'iris' from 'datasets', but with variables names in snake_case\" \"(Sepal.Length -> sepal_length, Species -> species).\" #>   ..- attr(*, \"lang\")= chr \"en\" #>   ..- attr(*, \"lang_encoding\")= chr \"UTF-8\" #>   ..- attr(*, \"src\")= chr \"datasets::iris\" #>  - attr(*, \".internal.selfref\")=<externalptr> comment(iris) #> [1] \"The 'iris' from 'datasets', but with variables names in snake_case\" #> [2] \"(Sepal.Length -> sepal_length, Species -> species).\"                #> attr(,\"lang\") #> [1] \"en\" #> attr(,\"lang_encoding\") #> [1] \"UTF-8\" #> attr(,\"src\") #> [1] \"datasets::iris\" iris <- read(\"iris\", package = \"datasets\", lang = \"fr\") str(iris) #> Classes 'data.table' and 'data.frame':   150 obs. of  5 variables: #>  $ sepal_length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #>   ..- attr(*, \"label\")= chr \"Longueur des sépales\" #>   ..- attr(*, \"units\")= chr \"cm\" #>  $ sepal_width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #>   ..- attr(*, \"label\")= chr \"Largeur des sépales\" #>   ..- attr(*, \"units\")= chr \"cm\" #>  $ petal_length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #>   ..- attr(*, \"label\")= chr \"Longueur des pétales\" #>   ..- attr(*, \"units\")= chr \"cm\" #>  $ petal_width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #>   ..- attr(*, \"label\")= chr \"Largeur des pétales\" #>   ..- attr(*, \"units\")= chr \"cm\" #>  $ species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"label\")= chr \"Espèces d'Iris\" #>  - attr(*, \"comment\")= chr [1:2] \"Jeu de données 'iris' de 'datasets', mais avec noms de variables modifiées\" \"(Sepal.Length -> sepal_length, Species -> species).\" #>   ..- attr(*, \"lang\")= chr \"fr\" #>   ..- attr(*, \"lang_encoding\")= chr \"UTF-8\" #>   ..- attr(*, \"src\")= chr \"datasets::iris\" #>  - attr(*, \".internal.selfref\")=<externalptr> trees <- read(\"trees\", package = \"datasets\") head(trees) #>    diameter height volume #>       <num>  <num>  <num> #> 1:    0.211   21.3  0.292 #> 2:    0.218   19.8  0.292 #> 3:    0.224   19.2  0.289 #> 4:    0.267   21.9  0.464 #> 5:    0.272   24.7  0.532 #> 6:    0.274   25.3  0.558 str(trees) #> Classes 'data.table' and 'data.frame':   31 obs. of  3 variables: #>  $ diameter: num  0.211 0.218 0.224 0.267 0.272 0.274 0.279 0.279 0.282 0.284 ... #>   ..- attr(*, \"label\")= chr \"Diameter at 1.4m\" #>   ..- attr(*, \"units\")= chr \"m\" #>  $ height  : num  21.3 19.8 19.2 21.9 24.7 25.3 20.1 22.9 24.4 22.9 ... #>   ..- attr(*, \"label\")= chr \"Height\" #>   ..- attr(*, \"units\")= chr \"m\" #>  $ volume  : num  0.292 0.292 0.289 0.464 0.532 0.558 0.442 0.515 0.64 0.563 ... #>   ..- attr(*, \"label\")= chr \"Volume of timber\" #>   ..- attr(*, \"units\")= chr \"m^3\" #>  - attr(*, \"comment\")= chr [1:3] \"The 'trees' from 'datasets' but with variables renamed and in m or m^3\" \"(Girth [in] -> diameter [m], Height [ft] -> height [m],\" \"Volume [ft^3] -> volume [m^3]).\" #>   ..- attr(*, \"lang\")= chr \"en\" #>   ..- attr(*, \"lang_encoding\")= chr \"UTF-8\" #>   ..- attr(*, \"src\")= chr \"datasets::trees\" #>  - attr(*, \".internal.selfref\")=<externalptr> data(trees) head(trees) #>   Girth Height Volume #> 1   8.3     70   10.3 #> 2   8.6     65   10.3 #> 3   8.8     63   10.2 #> 4  10.5     72   16.4 #> 5  10.7     81   18.8 #> 6  10.8     83   19.7 str(trees) #> 'data.frame':    31 obs. of  3 variables: #>  $ Girth : num  8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ... #>  $ Height: num  70 65 63 72 81 83 66 75 80 75 ... #>  $ Volume: num  10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ..."},{"path":"https://www.sciviews.org/data.io/articles/data-io.html","id":"discovering-datasets-in-r-packages","dir":"Articles","previous_headings":"Datasets in R packages","what":"Discovering datasets in R packages","title":"SciViews datasets and read()/write() functions","text":"use read() without arguments, list datasets installed R packages opened RStudio web browser. just specify package = \"<package_name>\", datasets package listed.","code":""},{"path":"https://www.sciviews.org/data.io/articles/data-io.html","id":"read-and-write-data","dir":"Articles","previous_headings":"","what":"Read and write data","title":"SciViews datasets and read()/write() functions","text":"read() write() functions implement type = argument specify format. format specification optional read() file extension explicit enough. However, mandatory write(). alternate compact syntax advised: one can “subset” read() write() function type. instance, write df CSV file “data/df.csv”, one can use write(df, \"data/df.csv\", type = \"csv\"), one can also use write$csv(df, \"data/df.csv\"). later form compact easier read. {data.io} contains “extdata” folder series example datasets different formats. data_example() function can used get path files. instance, get path “iris.csv.gz” file, one can use: , can import compressed CSV file read():","code":"data_example(\"iris.csv.gz\") #> [1] \"/home/runner/work/_temp/Library/data.io/extdata/iris.csv.gz\" read$csv.gz(data_example(\"iris.csv.gz\")) # Type optional (explicit extension) #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #>      Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #>             <num>       <num>        <num>       <num>    <char> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica"},{"path":"https://www.sciviews.org/data.io/articles/data-io.html","id":"metadata-label-and-units","dir":"Articles","previous_headings":"Read and write data","what":"Metadata (label and units)","title":"SciViews datasets and read()/write() functions","text":"add labels units variables data.frame, can use labelise() function. example synthetic data: label give units variables (, units sex). general metadata, can add base comment() <- \"metadata...\" instruction.","code":"df <- data.frame(   age = 1:10,   size = 3 + 0.5 * (1:10) + rnorm(10),   sex = sample(c(\"M\", \"F\"), 10, replace = TRUE) ) # Add labels and units df <- labelise(df,   label = list(age = \"Age\", size = \"Body size\", sex = \"Sex\"),   units = list(age = \"years\", size = \"cm\")) str(df) #> 'data.frame':    10 obs. of  3 variables: #>  $ age : int  1 2 3 4 5 6 7 8 9 10 #>   ..- attr(*, \"label\")= chr \"Age\" #>   ..- attr(*, \"units\")= chr \"years\" #>  $ size: num  2.1 4.26 2.06 4.99 6.12 ... #>   ..- attr(*, \"label\")= chr \"Body size\" #>   ..- attr(*, \"units\")= chr \"cm\" #>  $ sex : chr  \"M\" \"M\" \"F\" \"M\" ... #>   ..- attr(*, \"label\")= chr \"Sex\""},{"path":"https://www.sciviews.org/data.io/articles/data-io.html","id":"sidecar-r-scripts","dir":"Articles","previous_headings":"Read and write data","what":"Sidecar R scripts","title":"SciViews datasets and read()/write() functions","text":"file formats (except save R object natively) lack features fully express structure data metadata label units. ubiquitous CSV format good example. possible indicate CSV file character string column treated character factor instance. Also, Date POSIXt fields imported character . Consequently, dataset must postprocessed R bring corrections. data.io::read(), another mechanism available, using sidecar R scripts. script folder dataset bears name .R extension appended name dataset. “extdata” folder {data.io}, example dataset named “iris_sidecar.csv”, complement, “iris_sidecar.csv.R”. sidecar file contains code executed data imported. can transform rename variables, add labels units, calculate derived variables, handle code missing data, etc. sidecar file used default. indicate argument sidecar_file = FALSE read() use . “iris_sidecar.csv” file imported first without using sidecar file, , : sidecar script rename variables iris_sc. Note species variable iris_sc converted factor, Species iris_no_sc still *character** variable. Note also labels units added variable iris_sc. sidecar file convenient quick preprocessing datasets. way, resave data different format keeps metadata types variables. example sidecar file rather complex deals several languages lang = argument read(). Usually, sidecar file much shorter, just dealing couple adjustments dataset.","code":"(iris_sidecar_csv_file <- data_example(\"iris_sidecar.csv\")) #> [1] \"/home/runner/work/_temp/Library/data.io/extdata/iris_sidecar.csv\" data_example(\"iris_sidecar.csv.R\") #> [1] \"/home/runner/work/_temp/Library/data.io/extdata/iris_sidecar.csv.R\" # Without sidecar file (iris_no_sc <- read$csv(iris_sidecar_csv_file, sidecar_file = FALSE)) #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #>      Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #>             <num>       <num>        <num>       <num>    <char> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica str(iris_no_sc) #> Classes 'data.table' and 'data.frame':   150 obs. of  5 variables: #>  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #>  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #>  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #>  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #>  $ Species     : chr  \"setosa\" \"setosa\" \"setosa\" \"setosa\" ... #>  - attr(*, \"spec\")= #>   .. cols( #>   ..   Sepal.Length = col_double(), #>   ..   Sepal.Width = col_double(), #>   ..   Petal.Length = col_double(), #>   ..   Petal.Width = col_double(), #>   ..   Species = col_character() #>   .. ) #>  - attr(*, \"problems\")=<externalptr>  #>  - attr(*, \"comment\")= chr \"\" #>   ..- attr(*, \"lang\")= chr \"en\" #>   ..- attr(*, \"lang_encoding\")= chr \"UTF-8\" #>   ..- attr(*, \"srcfile\")= chr \"/home/runner/work/_temp/Library/data.io/extdata/iris_sidecar.csv\" #>  - attr(*, \".internal.selfref\")=<externalptr> # With sidecar file (sidecar_file = TRUE is the default) (iris_sc <- read$csv(iris_sidecar_csv_file)) #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning in cmt[] <- c(cmt, comments): number of items to replace is not a #> multiple of replacement length #>      sepal_length sepal_width petal_length petal_width   species #>             <num>       <num>        <num>       <num>    <fctr> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica str(iris_sc) #> Classes 'data.table' and 'data.frame':   150 obs. of  5 variables: #>  $ sepal_length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #>   ..- attr(*, \"label\")= chr \"Length of the sepals\" #>   ..- attr(*, \"units\")= chr \"cm\" #>  $ sepal_width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #>   ..- attr(*, \"label\")= chr \"Width of the sepals\" #>   ..- attr(*, \"units\")= chr \"cm\" #>  $ petal_length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #>   ..- attr(*, \"label\")= chr \"Length of the petals\" #>   ..- attr(*, \"units\")= chr \"cm\" #>  $ petal_width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #>   ..- attr(*, \"label\")= chr \"Width of the petals\" #>   ..- attr(*, \"units\")= chr \"cm\" #>  $ species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"label\")= chr \"Iris species\" #>  - attr(*, \"spec\")= #>   .. cols( #>   ..   Sepal.Length = col_double(), #>   ..   Sepal.Width = col_double(), #>   ..   Petal.Length = col_double(), #>   ..   Petal.Width = col_double(), #>   ..   Species = col_character() #>   .. ) #>  - attr(*, \"problems\")=<externalptr>  #>  - attr(*, \"comment\")= chr \"\" #>   ..- attr(*, \"lang\")= chr \"en\" #>   ..- attr(*, \"lang_encoding\")= chr \"UTF-8\" #>   ..- attr(*, \"srcfile\")= chr \"/home/runner/work/_temp/Library/data.io/extdata/iris_sidecar.csv.R\" #>  - attr(*, \".internal.selfref\")=<externalptr>"},{"path":"https://www.sciviews.org/data.io/articles/data-io.html","id":"reading-data-from-urls-and-cache-mechanism","dir":"Articles","previous_headings":"Read and write data","what":"Reading data from URLs and cache mechanism","title":"SciViews datasets and read()/write() functions","text":"read() function can also import data URL supported file formats (note code reads URL executed vignette avoid problems checking package, can run code ). case URL end explicit extension, specify file format type (read$csv(....) dataset CSV format). Reading data external URL convenient, especially big datasets want include, say, git repository. However, slow retrieve big datasets time internet. read() function implements cache mechanism activate indicating file want store cached copy dataset cache_file = argument. example: Now, copy dataset CSV format ble_cache_file. project managed git, probably indicate folder contains cached copies large datasets .gitignore. way, can use large, even huge datasets git repositories without versioning large files. downloaded internet . Every time read ble dataset , imported local cache file. case refresh cached version URL, just erase cache file read , use force = TRUE):","code":"(ble <- read$csv(\"http://tinyurl.com/Biostat-Ble\")) # Here, we use the temporary directory for the example # but you should use a permanent directory in your project ble_cache_file <- file.path(tempdir(), \"ble.csv\") (ble <- read$csv(\"http://tinyurl.com/Biostat-Ble\",   cache_file = ble_cache_file)) cat(readLines(ble_cache_file)[1:4], sep = \"\\n\") ble <- read$csv(\"http://tinyurl.com/Biostat-Ble\",   cache_file = ble_cache_file) ble <- read$csv(\"http://tinyurl.com/Biostat-Ble\",   cache_file = ble_cache_file, force = TRUE)"},{"path":"https://www.sciviews.org/data.io/articles/data-io.html","id":"list-of-supported-file-formats","dir":"Articles","previous_headings":"Read and write data","what":"List of supported file formats","title":"SciViews datasets and read()/write() functions","text":"list file formats read() write() can handle summarized table produced data_types() (using default view = TRUE automatically opens view RStudio web browser table):","code":"data.io::data_types(view = FALSE) #> # A tibble: 32 × 5 #>    type  read_fun             read_header         write_fun              comment #>    <chr> <chr>                <chr>               <chr>                  <chr>   #>  1 csv   readr::read_csv      data.io::hread_text readr::write_csv       comma … #>  2 csv2  readr::read_csv2     data.io::hread_text NA                     semico… #>  3 xlcsv readr::read_csv      data.io::hread_text readr::write_excel_csv write … #>  4 tsv   readr::read_tsv      data.io::hread_text readr::write_tsv       tab se… #>  5 fwf   readr::read_fwf      data.io::hread_text NA                     fixed … #>  6 log   readr::read_log      NA                  NA                     standa… #>  7 rds   readr::read_rds      NA                  readr::write_rds       R data… #>  8 txt   readr::read_file     NA                  readr::write_file      text f… #>  9 raw   readr::read_file_raw NA                  NA                     binary… #> 10 ssv   readr::read_table    data.io::hread_text NA                     space … #> # ℹ 22 more rows"},{"path":"https://www.sciviews.org/data.io/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Philippe Grosjean. Author, maintainer.","code":""},{"path":"https://www.sciviews.org/data.io/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Grosjean, Ph. (2024). SciViews-R. UMONS, Mons, Belgium. URL https://www.sciviews.org/SciViews-R/.","code":"@Manual{,   title = {SciViews-R},   author = {Philippe Grosjean},   organization = {UMONS},   address = {MONS, Belgium},   year = {2024},   url = {https://www.sciviews.org/SciViews-R/}, }"},{"path":"https://www.sciviews.org/data.io/index.html","id":null,"dir":"","previous_headings":"","what":"Read and Write Data in Different Formats","title":"Read and Write Data in Different Formats","text":"{data.io} main functions read() write(). made super-easy import export data various formats unified way (use functions packages hood like {haven}, {readr}, {readxl}, {writexl} …). care metadata, particular, meaningful labels units variables. Also, mechanism preprocess data sets using sidecar files, translate various languages provided subset R packages data sets.","code":""},{"path":"https://www.sciviews.org/data.io/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read and Write Data in Different Formats","text":"{data.io} available CRAN yet. install SciViews R-Universe. install package dependencies, run following command R: {r, eval=FALSE} install.packages('data.io', repos = c('https://sciviews.r-universe.dev',   'https://cloud.r-project.org')) can also install latest development version. Make sure {remotes} R package installed: Use install_github() install {data.io} package Github (source main branch recompiled machine): R install required dependencies automatically, compile install {data.io}.","code":"install.packages(\"remotes\") remotes::install_github(\"SciViews/data.io\")"},{"path":"https://www.sciviews.org/data.io/index.html","id":"further-explore-dataio","dir":"","previous_headings":"","what":"Further explore {data.io}","title":"Read and Write Data in Different Formats","text":"can get help package way. Make {data.io} package available R session: Get help package: instructions, please, refer help pages https://www.sciviews.org/data.io/.","code":"library(\"data.io\") library(help = \"data.io\") help(\"data.io-package\") vignette(\"data-io\") # None is installed with install_github()"},{"path":"https://www.sciviews.org/data.io/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Read and Write Data in Different Formats","text":"Please note {data.io} project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://www.sciviews.org/data.io/reference/as_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated! Convert objects into dataframes (subclassing tibble) and check for it. — as_dataframe","title":"Deprecated! Convert objects into dataframes (subclassing tibble) and check for it. — as_dataframe","text":"Convert object dataframe check . dataframe (without dot) data.frame (dot, default rectangular dataset structure R) tibble, tidyverse equivalence. fact, dataframes behave almost completely like tibble, except details explained details section.","code":""},{"path":"https://www.sciviews.org/data.io/reference/as_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated! Convert objects into dataframes (subclassing tibble) and check for it. — as_dataframe","text":"","code":"as_dataframe(x, ...)  as.dataframe(x, ...)  # S3 method for default as_dataframe(x, tz = \"UTC\", ...)  # S3 method for data.frame as_dataframe(x, ..., rownames = \"rownames\")  # S3 method for dataframe as_dataframe(   x,   ...,   rownames = \"rownames\",   .name_repair = c(\"check_unique\", \"unique\", \"universal\", \"minimal\") )  # S3 method for list as_dataframe(   x,   .name_repair = c(\"check_unique\", \"unique\", \"universal\", \"minimal\"),   ... )  # S3 method for matrix as_dataframe(x, ..., rownames = \"rownames\")  # S3 method for table as_dataframe(x, n = \"n\", ...)  is_dataframe(x)  is.dataframe(x)"},{"path":"https://www.sciviews.org/data.io/reference/as_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated! Convert objects into dataframes (subclassing tibble) and check for it. — as_dataframe","text":"x object convert dataframe. ... Additional parameters. tz time zone. Useful converting ts objects observations frequent daily. rownames Name column prepended dataframe original row names (dataframes tibbles support row names). NULL, row names dropped. inclusion rownames column done row names trivial, .e., equal number rows data frame. .name_repair Treatment problematic column names. \"check.unique\" (default value) repair names make sure unique. \"unique\" make sure names unique non empty. \"universal\" make names unique syntactic. \"minimal\"repair check (just make sure names exist). n name column containing number items, \"n\" default.","code":""},{"path":"https://www.sciviews.org/data.io/reference/as_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated! Convert objects into dataframes (subclassing tibble) and check for it. — as_dataframe","text":"dataframe, S3 object class c(\"dataframe\", \"tbl_df\", \"tbl\", \"data.frame\").","code":""},{"path":"https://www.sciviews.org/data.io/reference/as_dataframe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated! Convert objects into dataframes (subclassing tibble) and check for it. — as_dataframe","text":"TODO: explain difference dataframes tibbles ...","code":""},{"path":[]},{"path":"https://www.sciviews.org/data.io/reference/as_dataframe.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Deprecated! Convert objects into dataframes (subclassing tibble) and check for it. — as_dataframe","text":"Philippe Grosjean phgrosjean@sciviews.org","code":""},{"path":"https://www.sciviews.org/data.io/reference/as_dataframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecated! Convert objects into dataframes (subclassing tibble) and check for it. — as_dataframe","text":"","code":"class(as.dataframe(mtcars)) #> Warning: `as_dataframe()` was deprecated in data.io 1.4.0. #> ℹ Please use `svBase::as_dtx()` instead. #> [1] \"dataframe\"  \"tbl_df\"     \"tbl\"        \"data.frame\" class(as.dataframe(tibble::tribble(~x, ~y, 1, 2, 3, 4))) #> [1] \"dataframe\"  \"tbl_df\"     \"tbl\"        \"data.frame\" # \\donttest{ # Any object, like a vector v1 <- 1:10 is_dataframe(v1) #> Warning: `is_dataframe()` was deprecated in data.io 1.4.0. #> ℹ Please use `svBase::is_dtx()` instead. #> [1] FALSE (df1 <- as_dataframe(v1)) #> # A tibble: 10 × 1 #>    value #>    <int> #>  1     1 #>  2     2 #>  3     3 #>  4     4 #>  5     5 #>  6     6 #>  7     7 #>  8     8 #>  9     9 #> 10    10 is_dataframe(df1) #> [1] TRUE # Check names of an existing dataframe (as_dataframe(df1, .name_repair = \"universal\")) #> # A tibble: 10 × 1 #>    value #>    <int> #>  1     1 #>  2     2 #>  3     3 #>  4     4 #>  5     5 #>  6     6 #>  7     7 #>  8     8 #>  9     9 #> 10    10 # A data.frame with trivial row names datasets::iris #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5          1.4         0.2     setosa #> 2            4.9         3.0          1.4         0.2     setosa #> 3            4.7         3.2          1.3         0.2     setosa #> 4            4.6         3.1          1.5         0.2     setosa #> 5            5.0         3.6          1.4         0.2     setosa #> 6            5.4         3.9          1.7         0.4     setosa #> 7            4.6         3.4          1.4         0.3     setosa #> 8            5.0         3.4          1.5         0.2     setosa #> 9            4.4         2.9          1.4         0.2     setosa #> 10           4.9         3.1          1.5         0.1     setosa #> 11           5.4         3.7          1.5         0.2     setosa #> 12           4.8         3.4          1.6         0.2     setosa #> 13           4.8         3.0          1.4         0.1     setosa #> 14           4.3         3.0          1.1         0.1     setosa #> 15           5.8         4.0          1.2         0.2     setosa #> 16           5.7         4.4          1.5         0.4     setosa #> 17           5.4         3.9          1.3         0.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19           5.7         3.8          1.7         0.3     setosa #> 20           5.1         3.8          1.5         0.3     setosa #> 21           5.4         3.4          1.7         0.2     setosa #> 22           5.1         3.7          1.5         0.4     setosa #> 23           4.6         3.6          1.0         0.2     setosa #> 24           5.1         3.3          1.7         0.5     setosa #> 25           4.8         3.4          1.9         0.2     setosa #> 26           5.0         3.0          1.6         0.2     setosa #> 27           5.0         3.4          1.6         0.4     setosa #> 28           5.2         3.5          1.5         0.2     setosa #> 29           5.2         3.4          1.4         0.2     setosa #> 30           4.7         3.2          1.6         0.2     setosa #> 31           4.8         3.1          1.6         0.2     setosa #> 32           5.4         3.4          1.5         0.4     setosa #> 33           5.2         4.1          1.5         0.1     setosa #> 34           5.5         4.2          1.4         0.2     setosa #> 35           4.9         3.1          1.5         0.2     setosa #> 36           5.0         3.2          1.2         0.2     setosa #> 37           5.5         3.5          1.3         0.2     setosa #> 38           4.9         3.6          1.4         0.1     setosa #> 39           4.4         3.0          1.3         0.2     setosa #> 40           5.1         3.4          1.5         0.2     setosa #> 41           5.0         3.5          1.3         0.3     setosa #> 42           4.5         2.3          1.3         0.3     setosa #> 43           4.4         3.2          1.3         0.2     setosa #> 44           5.0         3.5          1.6         0.6     setosa #> 45           5.1         3.8          1.9         0.4     setosa #> 46           4.8         3.0          1.4         0.3     setosa #> 47           5.1         3.8          1.6         0.2     setosa #> 48           4.6         3.2          1.4         0.2     setosa #> 49           5.3         3.7          1.5         0.2     setosa #> 50           5.0         3.3          1.4         0.2     setosa #> 51           7.0         3.2          4.7         1.4 versicolor #> 52           6.4         3.2          4.5         1.5 versicolor #> 53           6.9         3.1          4.9         1.5 versicolor #> 54           5.5         2.3          4.0         1.3 versicolor #> 55           6.5         2.8          4.6         1.5 versicolor #> 56           5.7         2.8          4.5         1.3 versicolor #> 57           6.3         3.3          4.7         1.6 versicolor #> 58           4.9         2.4          3.3         1.0 versicolor #> 59           6.6         2.9          4.6         1.3 versicolor #> 60           5.2         2.7          3.9         1.4 versicolor #> 61           5.0         2.0          3.5         1.0 versicolor #> 62           5.9         3.0          4.2         1.5 versicolor #> 63           6.0         2.2          4.0         1.0 versicolor #> 64           6.1         2.9          4.7         1.4 versicolor #> 65           5.6         2.9          3.6         1.3 versicolor #> 66           6.7         3.1          4.4         1.4 versicolor #> 67           5.6         3.0          4.5         1.5 versicolor #> 68           5.8         2.7          4.1         1.0 versicolor #> 69           6.2         2.2          4.5         1.5 versicolor #> 70           5.6         2.5          3.9         1.1 versicolor #> 71           5.9         3.2          4.8         1.8 versicolor #> 72           6.1         2.8          4.0         1.3 versicolor #> 73           6.3         2.5          4.9         1.5 versicolor #> 74           6.1         2.8          4.7         1.2 versicolor #> 75           6.4         2.9          4.3         1.3 versicolor #> 76           6.6         3.0          4.4         1.4 versicolor #> 77           6.8         2.8          4.8         1.4 versicolor #> 78           6.7         3.0          5.0         1.7 versicolor #> 79           6.0         2.9          4.5         1.5 versicolor #> 80           5.7         2.6          3.5         1.0 versicolor #> 81           5.5         2.4          3.8         1.1 versicolor #> 82           5.5         2.4          3.7         1.0 versicolor #> 83           5.8         2.7          3.9         1.2 versicolor #> 84           6.0         2.7          5.1         1.6 versicolor #> 85           5.4         3.0          4.5         1.5 versicolor #> 86           6.0         3.4          4.5         1.6 versicolor #> 87           6.7         3.1          4.7         1.5 versicolor #> 88           6.3         2.3          4.4         1.3 versicolor #> 89           5.6         3.0          4.1         1.3 versicolor #> 90           5.5         2.5          4.0         1.3 versicolor #> 91           5.5         2.6          4.4         1.2 versicolor #> 92           6.1         3.0          4.6         1.4 versicolor #> 93           5.8         2.6          4.0         1.2 versicolor #> 94           5.0         2.3          3.3         1.0 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 96           5.7         3.0          4.2         1.2 versicolor #> 97           5.7         2.9          4.2         1.3 versicolor #> 98           6.2         2.9          4.3         1.3 versicolor #> 99           5.1         2.5          3.0         1.1 versicolor #> 100          5.7         2.8          4.1         1.3 versicolor #> 101          6.3         3.3          6.0         2.5  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103          7.1         3.0          5.9         2.1  virginica #> 104          6.3         2.9          5.6         1.8  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106          7.6         3.0          6.6         2.1  virginica #> 107          4.9         2.5          4.5         1.7  virginica #> 108          7.3         2.9          6.3         1.8  virginica #> 109          6.7         2.5          5.8         1.8  virginica #> 110          7.2         3.6          6.1         2.5  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 112          6.4         2.7          5.3         1.9  virginica #> 113          6.8         3.0          5.5         2.1  virginica #> 114          5.7         2.5          5.0         2.0  virginica #> 115          5.8         2.8          5.1         2.4  virginica #> 116          6.4         3.2          5.3         2.3  virginica #> 117          6.5         3.0          5.5         1.8  virginica #> 118          7.7         3.8          6.7         2.2  virginica #> 119          7.7         2.6          6.9         2.3  virginica #> 120          6.0         2.2          5.0         1.5  virginica #> 121          6.9         3.2          5.7         2.3  virginica #> 122          5.6         2.8          4.9         2.0  virginica #> 123          7.7         2.8          6.7         2.0  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 125          6.7         3.3          5.7         2.1  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 128          6.1         3.0          4.9         1.8  virginica #> 129          6.4         2.8          5.6         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4         2.8          6.1         1.9  virginica #> 132          7.9         3.8          6.4         2.0  virginica #> 133          6.4         2.8          5.6         2.2  virginica #> 134          6.3         2.8          5.1         1.5  virginica #> 135          6.1         2.6          5.6         1.4  virginica #> 136          7.7         3.0          6.1         2.3  virginica #> 137          6.3         3.4          5.6         2.4  virginica #> 138          6.4         3.1          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 140          6.9         3.1          5.4         2.1  virginica #> 141          6.7         3.1          5.6         2.4  virginica #> 142          6.9         3.1          5.1         2.3  virginica #> 143          5.8         2.7          5.1         1.9  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 145          6.7         3.3          5.7         2.5  virginica #> 146          6.7         3.0          5.2         2.3  virginica #> 147          6.3         2.5          5.0         1.9  virginica #> 148          6.5         3.0          5.2         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9         3.0          5.1         1.8  virginica as_dataframe(datasets::iris) #> # A tibble: 150 × 5 #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>           <dbl>       <dbl>        <dbl>       <dbl> <fct>   #>  1          5.1         3.5          1.4         0.2 setosa  #>  2          4.9         3            1.4         0.2 setosa  #>  3          4.7         3.2          1.3         0.2 setosa  #>  4          4.6         3.1          1.5         0.2 setosa  #>  5          5           3.6          1.4         0.2 setosa  #>  6          5.4         3.9          1.7         0.4 setosa  #>  7          4.6         3.4          1.4         0.3 setosa  #>  8          5           3.4          1.5         0.2 setosa  #>  9          4.4         2.9          1.4         0.2 setosa  #> 10          4.9         3.1          1.5         0.1 setosa  #> # ℹ 140 more rows # A data.frame containing meaningful row names datasets::mtcars #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 as_dataframe(datasets::mtcars) #> # A tibble: 32 × 12 #>    rownames      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows # A list l1 <- list(x = 1:3, y = rnorm(3)) as_dataframe(l1) #> # A tibble: 3 × 2 #>       x      y #>   <int>  <dbl> #> 1     1 -1.40  #> 2     2  0.255 #> 3     3 -2.44  # A matrix with column and row names (m1 <- matrix(1:9, nrow = 3L, dimnames = list(letters[1:3], LETTERS[1:3]))) #>   A B C #> a 1 4 7 #> b 2 5 8 #> c 3 6 9 as_dataframe(m1) #> # A tibble: 3 × 4 #>   rownames     A     B     C #>   <chr>    <int> <int> <int> #> 1 a            1     4     7 #> 2 b            2     5     8 #> 3 c            3     6     9 # A table set.seed(756) (t1 <- table(sample(letters[1:5], 50, replace = TRUE))) #>  #>  a  b  c  d  e  #> 14 10 10  9  7  as_dataframe(t1) #> # A tibble: 5 × 2 #>   Var1      n #>   <chr> <int> #> 1 a        14 #> 2 b        10 #> 3 c        10 #> 4 d         9 #> 5 e         7 # compare with the base R function: as.data.frame(t1) #>   Var1 Freq #> 1    a   14 #> 2    b   10 #> 3    c   10 #> 4    d    9 #> 5    e    7 # }"},{"path":"https://www.sciviews.org/data.io/reference/data.io-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Write Data in Different Formats — data.io-package","title":"Read and Write Data in Different Formats — data.io-package","text":"{data.io} package focuses reading writing datasets different formats unified convenient way. can deal labels units metadata variables, translation different languages, even use sidecar file preprocessing dataset automatically. features also available subset datasets R packages.","code":""},{"path":"https://www.sciviews.org/data.io/reference/data.io-package.html","id":"important-functions","dir":"Reference","previous_headings":"","what":"Important functions","title":"Read and Write Data in Different Formats — data.io-package","text":"read() main function read data R packages files, write() main function write data disk. compatible base::write() provides many features indicate type= use like write$type(). labelise() adds label, possibly units attributes object, used pretty printing table plot.","code":""},{"path":"https://www.sciviews.org/data.io/reference/data_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the path to some example datasets in this package — data_example","title":"Get the path to some example datasets in this package — data_example","text":"Get full path example datasets included different formats \"data.io\" package.","code":""},{"path":"https://www.sciviews.org/data.io/reference/data_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the path to some example datasets in this package — data_example","text":"","code":"data_example(path)"},{"path":"https://www.sciviews.org/data.io/reference/data_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the path to some example datasets in this package — data_example","text":"path subpath file inside \"extdata\" subdirectory \"data.io\" package.","code":""},{"path":"https://www.sciviews.org/data.io/reference/data_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the path to some example datasets in this package — data_example","text":"path file, \"\" found.","code":""},{"path":[]},{"path":"https://www.sciviews.org/data.io/reference/data_example.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the path to some example datasets in this package — data_example","text":"Philippe Grosjean phgrosjean@sciviews.org","code":""},{"path":"https://www.sciviews.org/data.io/reference/data_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the path to some example datasets in this package — data_example","text":"","code":"data_example(\"iris.csv\") #> [1] \"/home/runner/work/_temp/Library/data.io/extdata/iris.csv\""},{"path":"https://www.sciviews.org/data.io/reference/data_types.html","id":null,"dir":"Reference","previous_headings":"","what":"List recognized file formats (types) for read() and write() — data_types","title":"List recognized file formats (types) for read() and write() — data_types","text":"Display information data types can read() write() can use, well , original functions delegated (see respective help pages info know additional parameters can used read() write()).","code":""},{"path":"https://www.sciviews.org/data.io/reference/data_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List recognized file formats (types) for read() and write() — data_types","text":"","code":"data_types(types_only = FALSE, view = TRUE)"},{"path":"https://www.sciviews.org/data.io/reference/data_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List recognized file formats (types) for read() and write() — data_types","text":"types_only TRUE, vector types returned, otherwise, tibble full specifications provided. view TRUE, result \"viewed\" (displayed table separate window, user interface allows , e.g., RStudio) returned invisibly. Otherwise, results returned normally.","code":""},{"path":"https://www.sciviews.org/data.io/reference/data_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List recognized file formats (types) for read() and write() — data_types","text":"tibble types_only = FALSE, character vector.","code":""},{"path":"https://www.sciviews.org/data.io/reference/data_types.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List recognized file formats (types) for read() and write() — data_types","text":"function mainly designed used interactively provide information file types can read() write(). done man page list dynamic packages add change entries . view = FALSE, function can, nevertheless, also used script R Markdown/Notebook document.","code":""},{"path":[]},{"path":"https://www.sciviews.org/data.io/reference/data_types.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List recognized file formats (types) for read() and write() — data_types","text":"Philippe Grosjean phgrosjean@sciviews.org","code":""},{"path":"https://www.sciviews.org/data.io/reference/data_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List recognized file formats (types) for read() and write() — data_types","text":"","code":"if (FALSE) { data_types() data_types(TRUE) } # For non-interactive use, specify view = FALSE data_types(view = FALSE) #> # A tibble: 32 × 5 #>    type  read_fun             read_header         write_fun              comment #>    <chr> <chr>                <chr>               <chr>                  <chr>   #>  1 csv   readr::read_csv      data.io::hread_text readr::write_csv       comma … #>  2 csv2  readr::read_csv2     data.io::hread_text NA                     semico… #>  3 xlcsv readr::read_csv      data.io::hread_text readr::write_excel_csv write … #>  4 tsv   readr::read_tsv      data.io::hread_text readr::write_tsv       tab se… #>  5 fwf   readr::read_fwf      data.io::hread_text NA                     fixed … #>  6 log   readr::read_log      NA                  NA                     standa… #>  7 rds   readr::read_rds      NA                  readr::write_rds       R data… #>  8 txt   readr::read_file     NA                  readr::write_file      text f… #>  9 raw   readr::read_file_raw NA                  NA                     binary… #> 10 ssv   readr::read_table    data.io::hread_text NA                     space … #> # ℹ 22 more rows data_types(TRUE, view = FALSE) #>  [1] \"csv\"      \"csv2\"     \"xlcsv\"    \"tsv\"      \"fwf\"      \"log\"      #>  [7] \"rds\"      \"txt\"      \"raw\"      \"ssv\"      \"ssv2\"     \"csv.gz\"   #> [13] \"csv2.gz\"  \"tsv.gz\"   \"txt.gz\"   \"csv.bz2\"  \"csv2.bz2\" \"tsv.bz2\"  #> [19] \"txt.bz2\"  \"csv.xz\"   \"csv2.xz\"  \"tsv.xz\"   \"txt.xz\"   \"xls\"      #> [25] \"xlsx\"     \"dta\"      \"sas\"      \"sas7bdat\" \"sav\"      \"zsav\"     #> [31] \"por\"      \"xpt\""},{"path":"https://www.sciviews.org/data.io/reference/datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Labelised versions of various datasets provided by 'data.io' or other packages — Datasets","title":"Labelised versions of various datasets provided by 'data.io' or other packages — Datasets","text":"Use name <- read(\"data\", package = \"pkg\", lang = \"xx\") read datasets together metadata (labels, units, comments, ...).","code":""},{"path":"https://www.sciviews.org/data.io/reference/datasets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Labelised versions of various datasets provided by 'data.io' or other packages — Datasets","text":"data: mauna_loa Temperature atmospheric CO2 Mauna Loa, Hawai. 5 vars x 768 obs. Time series monthly averages 1955 2018. urchin_bio Sea urchins biometry. 19 vars x 421 obs. Morphometric variables measured two populations sea urchins, incl. one circular variable (maturity). urchin_growth Sea urchins growth. 3 vars x 7024 obs. Size age cohort sea urchins followed 10 years. zooplankton Zooplankton image analysis. 20 vars x 1262 obs. training set 19 measurements made images zooplankton respective class attributed taxonomists. datasets: anscombe Anscombe's quartet 'identical' simple linear Regressions. 8 vars x 11 obs. Artificial data. iris Edgar Anderson's iris data. 5 vars x 150 obs. Morphometry flowers three iris species (50 species). lynx Annual Canadian lynx trappings 1821–1934. 2 vars x 114 obs. Long (> 1 century) time series. trees Black cherry trees measurements. 3 vars x 31 obs. Measurement tree timber various sizes. ggplot2: ggplot2::diamonds Prices 50,000 round cut diamonds. 10 vars x 53940 obs. Price attributes 10,000's diamonds. ggplot2::mpg Fuel economy data 1999 2008 popular cars. 11 vars x 234 obs. Data popular U.S. market cars . MASS: crabs Morphological measurements Leptograpsus crabs. 8 vars x 200 obs. Morphological measurements Leptograpsus variegatus crabs, either blue orange, males females. geyser Old Faithful geyser data. 2 vars x 299 obs. Duration waiting time eruptions August 1 August 15, 1985. nycflights13: nycflights13::airlines Airlines carrier codes. 2 vars x 16 obs. nycflights13::airports Various metadata New York city airports. 8 vars x 1458 obs. nycflights13::flights -time data flights departed NYC (.e., JFK, LGA EWR) 2013. 19 vars x 336776 obs. nycflights13::planes Planes metadata. 9 vars x 3322 obs. nycflights13::weather Hourly meteorological data JFK, LGA EWR. 15 vars x 26130 obs.","code":""},{"path":"https://www.sciviews.org/data.io/reference/labelise.html","id":null,"dir":"Reference","previous_headings":"","what":"Set label (and units) — labelise","title":"Set label (and units) — labelise","text":"Set label, well units attributes object. label can used better display plot axes labels, table headers pretty-formatted R outputs. units usually associated label axes labels plots. cl() shortcut concatenate (c()) labelise().","code":""},{"path":"https://www.sciviews.org/data.io/reference/labelise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set label (and units) — labelise","text":"","code":"labelise(x, label, units = NULL, as_labelled = FALSE, ...)  labelize(x, label, units = NULL, as_labelled = FALSE, ...)  # S3 method for default labelise(x, label, units = NULL, as_labelled = FALSE, ...)  # S3 method for data.frame labelise(x, label, units = NULL, as_labelled = FALSE, self = TRUE, ...)  cl(..., label = NULL, units = NULL, as_labelled = FALSE)  unlabelise(x, ...)  unlabelize(x, ...)  # S3 method for default unlabelise(x, ...)  # S3 method for data.frame unlabelise(x, self = TRUE, ...)"},{"path":"https://www.sciviews.org/data.io/reference/labelise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set label (and units) — labelise","text":"x object. label character string set label attribute x. units units (optional) character string set x. as_labelled object converted labelled S3 object (default)? make labelled objects, subsetting data lead lost label units attributes variables. hand, labelled objects always correctly handled R code. ... arguments: items concatenated vector using c(...) cl(). self label data.frame (self = TRUE, default) variables within data.frame (self = FALSE)? later case, label= units= must either lists character vectors length x, named names several x variables.","code":""},{"path":"https://www.sciviews.org/data.io/reference/labelise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set label (and units) — labelise","text":"x object plus label attribute, possibly, units attribute.","code":""},{"path":"https://www.sciviews.org/data.io/reference/labelise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set label (and units) — labelise","text":"mechanism one used package Hmisc used . However, Hmisc always add labelled class object, , optional. Setting class make object nicely printed, subsettable without loosing attributes. conflicts class name package haven, used purposes. , , one can also opt set , using as_labelled = FALSE.","code":""},{"path":[]},{"path":"https://www.sciviews.org/data.io/reference/labelise.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set label (and units) — labelise","text":"Philippe Grosjean phgrosjean@sciviews.org","code":""},{"path":"https://www.sciviews.org/data.io/reference/labelise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set label (and units) — labelise","text":"","code":"# Labelise a vector: x <- 1:10 x <- labelise(x, label = \"A suite of integers\", units = \"cm\") x #>  [1]  1  2  3  4  5  6  7  8  9 10 #> attr(,\"label\") #> [1] \"A suite of integers\" #> attr(,\"units\") #> [1] \"cm\" # or, in a single operation: x <- cl(1:10, label = \"A suite of integers\", units = \"cm\") x #>  [1]  1  2  3  4  5  6  7  8  9 10 #> attr(,\"label\") #> [1] \"A suite of integers\" #> attr(,\"units\") #> [1] \"cm\" # Not adding the labelled class: x <- cl(1:10, label = \"Integers\", units = \"cm\", as_labelled = FALSE) x #>  [1]  1  2  3  4  5  6  7  8  9 10 #> attr(,\"label\") #> [1] \"Integers\" #> attr(,\"units\") #> [1] \"cm\" # Unlabelising a labelised object unlabelise(x) #>  [1]  1  2  3  4  5  6  7  8  9 10  # Labelise a data.frame iris <- labelise(datasets::iris, \"The famous iris dataset\") unlabelise(iris) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5          1.4         0.2     setosa #> 2            4.9         3.0          1.4         0.2     setosa #> 3            4.7         3.2          1.3         0.2     setosa #> 4            4.6         3.1          1.5         0.2     setosa #> 5            5.0         3.6          1.4         0.2     setosa #> 6            5.4         3.9          1.7         0.4     setosa #> 7            4.6         3.4          1.4         0.3     setosa #> 8            5.0         3.4          1.5         0.2     setosa #> 9            4.4         2.9          1.4         0.2     setosa #> 10           4.9         3.1          1.5         0.1     setosa #> 11           5.4         3.7          1.5         0.2     setosa #> 12           4.8         3.4          1.6         0.2     setosa #> 13           4.8         3.0          1.4         0.1     setosa #> 14           4.3         3.0          1.1         0.1     setosa #> 15           5.8         4.0          1.2         0.2     setosa #> 16           5.7         4.4          1.5         0.4     setosa #> 17           5.4         3.9          1.3         0.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19           5.7         3.8          1.7         0.3     setosa #> 20           5.1         3.8          1.5         0.3     setosa #> 21           5.4         3.4          1.7         0.2     setosa #> 22           5.1         3.7          1.5         0.4     setosa #> 23           4.6         3.6          1.0         0.2     setosa #> 24           5.1         3.3          1.7         0.5     setosa #> 25           4.8         3.4          1.9         0.2     setosa #> 26           5.0         3.0          1.6         0.2     setosa #> 27           5.0         3.4          1.6         0.4     setosa #> 28           5.2         3.5          1.5         0.2     setosa #> 29           5.2         3.4          1.4         0.2     setosa #> 30           4.7         3.2          1.6         0.2     setosa #> 31           4.8         3.1          1.6         0.2     setosa #> 32           5.4         3.4          1.5         0.4     setosa #> 33           5.2         4.1          1.5         0.1     setosa #> 34           5.5         4.2          1.4         0.2     setosa #> 35           4.9         3.1          1.5         0.2     setosa #> 36           5.0         3.2          1.2         0.2     setosa #> 37           5.5         3.5          1.3         0.2     setosa #> 38           4.9         3.6          1.4         0.1     setosa #> 39           4.4         3.0          1.3         0.2     setosa #> 40           5.1         3.4          1.5         0.2     setosa #> 41           5.0         3.5          1.3         0.3     setosa #> 42           4.5         2.3          1.3         0.3     setosa #> 43           4.4         3.2          1.3         0.2     setosa #> 44           5.0         3.5          1.6         0.6     setosa #> 45           5.1         3.8          1.9         0.4     setosa #> 46           4.8         3.0          1.4         0.3     setosa #> 47           5.1         3.8          1.6         0.2     setosa #> 48           4.6         3.2          1.4         0.2     setosa #> 49           5.3         3.7          1.5         0.2     setosa #> 50           5.0         3.3          1.4         0.2     setosa #> 51           7.0         3.2          4.7         1.4 versicolor #> 52           6.4         3.2          4.5         1.5 versicolor #> 53           6.9         3.1          4.9         1.5 versicolor #> 54           5.5         2.3          4.0         1.3 versicolor #> 55           6.5         2.8          4.6         1.5 versicolor #> 56           5.7         2.8          4.5         1.3 versicolor #> 57           6.3         3.3          4.7         1.6 versicolor #> 58           4.9         2.4          3.3         1.0 versicolor #> 59           6.6         2.9          4.6         1.3 versicolor #> 60           5.2         2.7          3.9         1.4 versicolor #> 61           5.0         2.0          3.5         1.0 versicolor #> 62           5.9         3.0          4.2         1.5 versicolor #> 63           6.0         2.2          4.0         1.0 versicolor #> 64           6.1         2.9          4.7         1.4 versicolor #> 65           5.6         2.9          3.6         1.3 versicolor #> 66           6.7         3.1          4.4         1.4 versicolor #> 67           5.6         3.0          4.5         1.5 versicolor #> 68           5.8         2.7          4.1         1.0 versicolor #> 69           6.2         2.2          4.5         1.5 versicolor #> 70           5.6         2.5          3.9         1.1 versicolor #> 71           5.9         3.2          4.8         1.8 versicolor #> 72           6.1         2.8          4.0         1.3 versicolor #> 73           6.3         2.5          4.9         1.5 versicolor #> 74           6.1         2.8          4.7         1.2 versicolor #> 75           6.4         2.9          4.3         1.3 versicolor #> 76           6.6         3.0          4.4         1.4 versicolor #> 77           6.8         2.8          4.8         1.4 versicolor #> 78           6.7         3.0          5.0         1.7 versicolor #> 79           6.0         2.9          4.5         1.5 versicolor #> 80           5.7         2.6          3.5         1.0 versicolor #> 81           5.5         2.4          3.8         1.1 versicolor #> 82           5.5         2.4          3.7         1.0 versicolor #> 83           5.8         2.7          3.9         1.2 versicolor #> 84           6.0         2.7          5.1         1.6 versicolor #> 85           5.4         3.0          4.5         1.5 versicolor #> 86           6.0         3.4          4.5         1.6 versicolor #> 87           6.7         3.1          4.7         1.5 versicolor #> 88           6.3         2.3          4.4         1.3 versicolor #> 89           5.6         3.0          4.1         1.3 versicolor #> 90           5.5         2.5          4.0         1.3 versicolor #> 91           5.5         2.6          4.4         1.2 versicolor #> 92           6.1         3.0          4.6         1.4 versicolor #> 93           5.8         2.6          4.0         1.2 versicolor #> 94           5.0         2.3          3.3         1.0 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 96           5.7         3.0          4.2         1.2 versicolor #> 97           5.7         2.9          4.2         1.3 versicolor #> 98           6.2         2.9          4.3         1.3 versicolor #> 99           5.1         2.5          3.0         1.1 versicolor #> 100          5.7         2.8          4.1         1.3 versicolor #> 101          6.3         3.3          6.0         2.5  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103          7.1         3.0          5.9         2.1  virginica #> 104          6.3         2.9          5.6         1.8  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106          7.6         3.0          6.6         2.1  virginica #> 107          4.9         2.5          4.5         1.7  virginica #> 108          7.3         2.9          6.3         1.8  virginica #> 109          6.7         2.5          5.8         1.8  virginica #> 110          7.2         3.6          6.1         2.5  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 112          6.4         2.7          5.3         1.9  virginica #> 113          6.8         3.0          5.5         2.1  virginica #> 114          5.7         2.5          5.0         2.0  virginica #> 115          5.8         2.8          5.1         2.4  virginica #> 116          6.4         3.2          5.3         2.3  virginica #> 117          6.5         3.0          5.5         1.8  virginica #> 118          7.7         3.8          6.7         2.2  virginica #> 119          7.7         2.6          6.9         2.3  virginica #> 120          6.0         2.2          5.0         1.5  virginica #> 121          6.9         3.2          5.7         2.3  virginica #> 122          5.6         2.8          4.9         2.0  virginica #> 123          7.7         2.8          6.7         2.0  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 125          6.7         3.3          5.7         2.1  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 128          6.1         3.0          4.9         1.8  virginica #> 129          6.4         2.8          5.6         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4         2.8          6.1         1.9  virginica #> 132          7.9         3.8          6.4         2.0  virginica #> 133          6.4         2.8          5.6         2.2  virginica #> 134          6.3         2.8          5.1         1.5  virginica #> 135          6.1         2.6          5.6         1.4  virginica #> 136          7.7         3.0          6.1         2.3  virginica #> 137          6.3         3.4          5.6         2.4  virginica #> 138          6.4         3.1          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 140          6.9         3.1          5.4         2.1  virginica #> 141          6.7         3.1          5.6         2.4  virginica #> 142          6.9         3.1          5.1         2.3  virginica #> 143          5.8         2.7          5.1         1.9  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 145          6.7         3.3          5.7         2.5  virginica #> 146          6.7         3.0          5.2         2.3  virginica #> 147          6.3         2.5          5.0         1.9  virginica #> 148          6.5         3.0          5.2         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9         3.0          5.1         1.8  virginica # but if you indicate self = FALSE, you can labelise variables within the # data.frame (use a list or character vector of same length as x, or a # named list or character vector): iris <- labelise(iris, self = FALSE, label = list(   Sepal.Length = \"Length of the sepals\",   Petal.Length = \"Length of the petals\"   ), units = c(rep(\"cm\", 4), NA)) iris <- unlabelise(iris, self = FALSE)"},{"path":"https://www.sciviews.org/data.io/reference/mauna_loa.html","id":null,"dir":"Reference","previous_headings":"","what":"Temperature and atmospheric CO2 at Mauna Loa, Hawai — mauna_loa","title":"Temperature and atmospheric CO2 at Mauna Loa, Hawai — mauna_loa","text":"Monthly averages temperatures CO2 concentrations, maximal minimal monthly temperatures Mauna Loa slope observatory 1955 2018.","code":""},{"path":"https://www.sciviews.org/data.io/reference/mauna_loa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temperature and atmospheric CO2 at Mauna Loa, Hawai — mauna_loa","text":"","code":"mauna_loa"},{"path":"https://www.sciviews.org/data.io/reference/mauna_loa.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Temperature and atmospheric CO2 at Mauna Loa, Hawai — mauna_loa","text":"object class mts (inherits ts, matrix) 768 rows 4 columns.","code":""},{"path":"https://www.sciviews.org/data.io/reference/mauna_loa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Temperature and atmospheric CO2 at Mauna Loa, Hawai — mauna_loa","text":"Atmospheric CO2 concentration mole fraction dry air, micromol/mol, abbreviated ppm. Temperatures degree Celsius.","code":""},{"path":"https://www.sciviews.org/data.io/reference/mauna_loa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temperature and atmospheric CO2 at Mauna Loa, Hawai — mauna_loa","text":"","code":"class(mauna_loa) #> [1] \"mts\"    \"ts\"     \"matrix\" head(mauna_loa) #>      avg_temp min_temp max_temp avg_co2 #> [1,]      3.8     -5.6     10.6      NA #> [2,]      2.9     -6.7     10.6      NA #> [3,]      2.8     -6.7     12.8      NA #> [4,]      5.9     -3.3     17.2      NA #> [5,]      6.9     -1.7     16.7      NA #> [6,]      9.0     -0.6     17.8      NA plot(mauna_loa)   # Using read(), the dataset becomes an annotated dataframe (ml_en <- read(\"mauna_loa\", package = \"data.io\")) #> # A tsibble: 768 x 5 [1M] #>        time avg_temp min_temp max_temp avg_co2 #>       <mth>    <dbl>    <dbl>    <dbl>   <dbl> #>  1 1955 Jan      3.8     -5.6     10.6      NA #>  2 1955 Feb      2.9     -6.7     10.6      NA #>  3 1955 Mar      2.8     -6.7     12.8      NA #>  4 1955 Apr      5.9     -3.3     17.2      NA #>  5 1955 May      6.9     -1.7     16.7      NA #>  6 1955 Jun      9       -0.6     17.8      NA #>  7 1955 Jul      7.2     -3.3     16.7      NA #>  8 1955 Aug      7.7     -2.2     16.7      NA #>  9 1955 Sep      7.9     -1.7     16.7      NA #> 10 1955 Oct      7       -1.7     18.3      NA #> # ℹ 758 more rows class(ml_en) #> [1] \"tbl_ts\"     \"tbl_df\"     \"tbl\"        \"data.frame\"  # Indicating lang = \"EN_US\" (all uppercase!) also converts temperatures # into degrees Farenheit (ml_en_us <- read(\"mauna_loa\", package = \"data.io\", lang = \"EN_US\")) #> # A tsibble: 768 x 5 [1M] #>        time avg_temp min_temp max_temp avg_co2 #>       <mth>    <dbl>    <dbl>    <dbl>   <dbl> #>  1 1955 Jan     38.8     21.9     51.1      NA #>  2 1955 Feb     37.2     19.9     51.1      NA #>  3 1955 Mar     37       19.9     55        NA #>  4 1955 Apr     42.6     26.1     63        NA #>  5 1955 May     44.4     28.9     62.1      NA #>  6 1955 Jun     48.2     30.9     64        NA #>  7 1955 Jul     45       26.1     62.1      NA #>  8 1955 Aug     45.9     28       62.1      NA #>  9 1955 Sep     46.2     28.9     62.1      NA #> 10 1955 Oct     44.6     28.9     64.9      NA #> # ℹ 758 more rows # Each variable is also labelled: ml_en$avg_co2 #>   [1]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>  [13]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>  [25]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>  [37]    NA    NA 315.7 317.4 317.5    NA 315.9 314.9 313.2    NA 313.3 314.7 #>  [49] 315.6 316.4 316.7 317.7 318.3 318.1 316.5 314.8 313.8 313.3 314.8 315.6 #>  [61] 316.4 317.0 317.6 319.0 320.0 319.6 318.2 315.9 314.2 313.8 315.0 316.2 #>  [73] 316.9 317.7 318.5 319.5 320.6 319.8 318.6 316.8 314.8 315.4 316.1 317.0 #>  [85] 317.9 318.6 319.7 320.6 321.0 320.6 319.6 317.4 316.3 315.4 316.7 317.7 #>  [97] 318.7 319.1 319.9 321.4 322.2 321.5 319.7 317.8 316.2 316.0 317.1 318.3 #> [109] 319.6    NA    NA    NA 322.2 321.9 320.4 318.7 316.7 316.8 317.8 318.7 #> [121] 319.4 320.4 320.9 322.1 322.2 321.9 321.4 318.8 317.8 317.3 318.9 319.4 #> [133] 320.6 321.6 322.4 323.9 324.0 323.8 322.4 320.4 318.6 318.1 319.8 321.1 #> [145] 322.1 322.5 323.0 324.4 325.0 324.1 322.6 320.9 319.3 319.3 320.7 322.0 #> [157] 322.6 323.1 323.9 325.0 325.6 325.4 324.1 322.0 320.4 320.2 321.3 322.8 #> [169] 324.0 324.4 325.6 326.7 327.3 326.8 325.9 323.7 322.4 321.8 322.9 324.1 #> [181] 325.0 326.0 326.9 328.1 328.1 327.7 326.4 324.7 323.1 323.2 324.0 325.1 #> [193] 326.2 326.7 327.2 327.8 328.9 328.6 327.3 325.5 323.4 323.6 324.8 326.0 #> [205] 326.8 327.6 327.8 329.7 330.1 329.1 328.1 326.3 324.9 325.1 326.5 327.6 #> [217] 328.5 329.6 330.3 331.5 332.5 332.1 330.9 329.3 327.5 327.2 328.2 328.6 #> [229] 329.4 330.7 331.5 332.6 333.2 332.2 331.1 329.1 327.3 327.3 328.3 329.6 #> [241] 330.7 331.5 331.9 333.2 333.9 333.4 332.0 329.9 328.5 328.3 329.4    NA #> [253] 331.6 332.8 333.5 334.6 334.8 334.0 333.1 330.7 328.9 328.8 330.1 331.6 #> [265] 332.7 333.1 334.9 336.1 336.9 336.2 334.9 332.6 331.3 331.3 332.4 333.6 #> [277] 334.9 335.2 336.7 337.7 338.0 338.0 336.4 334.4 332.4 332.4 333.8 334.9 #> [289] 336.1 336.7 338.3 338.9 339.2 339.3 337.5 335.8 334.0 334.2 335.3 336.8 #> [301] 337.9 338.3 340.0 340.9 341.5 341.3 339.4 337.7 336.2 336.1 337.3 338.3 #> [313] 339.3 340.6 341.6 342.5 343.0 342.5 340.8 338.4 336.9 337.1 338.6 339.9 #> [325] 341.0 341.7 342.8 344.0 344.6 343.8 342.3 340.1 338.3 338.3 339.6 340.9 #> [337] 341.7 342.9 343.3 345.2 346.0 345.6 344.2 342.3 340.4 340.4 341.6 343.1 #> [349] 344.1 344.8 345.5    NA 347.6 347.0 345.5 343.6 341.4 341.7 343.1 344.7 #> [361] 345.2 346.2 347.7 348.3 349.1 348.4 346.7 345.0 343.3 343.1 344.5 345.9 #> [373] 346.6 347.3 348.0 349.8 350.4 349.9 348.2 346.1 345.2 344.5 345.9 347.2 #> [385] 348.5 348.7 349.7 351.3 352.1 351.5 350.1 348.1 346.5 346.6 348.0 349.2 #> [397] 350.4 351.6 352.4 353.7 354.2 353.7 352.7 350.4 348.9 349.1 350.2 351.4 #> [409] 352.9 353.3 354.0 355.6 355.9 355.4 354.0 351.8 350.1 350.2 351.5 352.9 #> [421] 353.8 355.0 355.7 356.3 357.3 356.3 354.8 353.0 351.3 351.6 353.1 354.3 #> [433] 354.8 355.7 357.2 358.7 359.1 358.1 356.2 353.9 352.2 352.4 353.8 355.1 #> [445] 356.2 357.1 357.9 359.1 359.6 359.3 357.0 354.9 353.0 353.3 354.3 355.6 #> [457] 357.0 357.3 358.5 359.3 360.2 359.5 357.3 355.6 354.0 354.1 355.4 356.9 #> [469] 358.2 358.9 360.0 361.2 361.6 360.8 359.4 357.5 355.7 356.1 357.5 359.0 #> [481] 359.9 360.9 361.8 363.3 363.7 363.2 361.6 359.1 358.2 358.0 359.4 360.7 #> [493] 362.1 363.2 364.2 364.6 365.1 364.9 363.6 361.4 359.5 359.6 360.9 362.2 #> [505] 363.1 364.0 364.5 366.4 366.6 365.6 364.3 362.2 360.3 360.8 362.5 364.4 #> [517] 365.3 366.0 367.2 368.7 369.4 369.0 367.8 365.9 364.0 364.4 365.5 367.1 #> [529] 368.2 369.1 369.7 371.0 371.0 370.3 369.4 366.9 364.8 365.4 366.7 368.1 #> [541] 369.3 369.5 370.6 371.8 371.6 371.7 369.9 368.1 367.0 367.0 368.4 369.7 #> [553] 370.6 371.5 372.4 373.4 373.9 373.2 371.5 369.6 368.2 368.4 369.8 371.2 #> [565] 372.5 373.2 374.1 375.0 375.8 375.5 374.0 371.9 370.8 370.6 372.2 373.8 #> [577] 374.9 375.6 376.4 377.7 378.6 378.3 376.7 374.4 373.2 373.1 374.7 376.0 #> [589] 377.0 377.9 378.9 380.4 380.6 379.7 377.5 376.0 374.2 374.5 376.2 377.5 #> [601] 378.5 379.7 380.8 382.3 382.4 382.2 380.7 378.7 376.7 377.0 378.4 380.1 #> [613] 381.4 382.2 382.7 384.6 385.0 384.1 382.5 380.4 378.9 379.1 380.1 381.8 #> [625] 382.9 383.9 384.6 386.5 386.6 386.1 384.5 382.0 381.0 381.1 382.4 383.9 #> [637] 385.5 385.8 386.0 387.2 388.5 387.8 386.4 384.1 383.2 383.0 384.2 385.6 #> [649] 386.9 387.5 388.8 389.6 390.1 389.5 388.0 386.1 384.7 384.4 386.0 387.4 #> [661] 388.7 390.2 391.2 392.5 393.0 392.1 390.2 388.4 386.9 387.2 388.7 389.8 #> [673] 391.3 391.9 392.6 393.2 394.2 393.7 392.5 390.1 389.1 389.0 390.3 391.9 #> [685] 393.1 393.9 394.4 396.2 396.7 395.7 394.4 392.4 391.1 391.1 393.0 394.3 #> [697] 395.6 396.8 397.4 398.4 399.8 398.6 397.3 395.2 393.4 393.7 395.2 396.8 #> [709] 397.9 398.0 399.8 401.4 401.8 401.2 399.1 397.0 395.4 396.0 397.3 398.9 #> [721] 400.0 400.3 401.5 403.3 404.0 402.8 401.3 398.9 397.6 398.3 400.2 401.9 #> [733] 402.5 404.0 404.8 407.4 407.7 406.8 404.4 402.2 401.0 401.6 403.5 404.4 #> [745] 406.1 406.4 407.2 409.0 409.6 408.8 407.1 405.1 403.4 403.6 405.1 406.8 #> [757] 408.0 408.4 409.5 410.3 411.2    NA    NA    NA    NA    NA    NA    NA #> attr(,\"label\") #> [1] \"Monthly [atmospheric CO2]\" #> attr(,\"units\") #> [1] \"ppm\"  # The same in French:  (ml_fr <- read(\"mauna_loa\", package = \"data.io\", lang = \"fr\")) #> # A tsibble: 768 x 5 [1M] #>        time avg_temp min_temp max_temp avg_co2 #>       <mth>    <dbl>    <dbl>    <dbl>   <dbl> #>  1 1955 Jan      3.8     -5.6     10.6      NA #>  2 1955 Feb      2.9     -6.7     10.6      NA #>  3 1955 Mar      2.8     -6.7     12.8      NA #>  4 1955 Apr      5.9     -3.3     17.2      NA #>  5 1955 May      6.9     -1.7     16.7      NA #>  6 1955 Jun      9       -0.6     17.8      NA #>  7 1955 Jul      7.2     -3.3     16.7      NA #>  8 1955 Aug      7.7     -2.2     16.7      NA #>  9 1955 Sep      7.9     -1.7     16.7      NA #> 10 1955 Oct      7       -1.7     18.3      NA #> # ℹ 758 more rows   ml_fr$avg_co2 #>   [1]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>  [13]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>  [25]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA #>  [37]    NA    NA 315.7 317.4 317.5    NA 315.9 314.9 313.2    NA 313.3 314.7 #>  [49] 315.6 316.4 316.7 317.7 318.3 318.1 316.5 314.8 313.8 313.3 314.8 315.6 #>  [61] 316.4 317.0 317.6 319.0 320.0 319.6 318.2 315.9 314.2 313.8 315.0 316.2 #>  [73] 316.9 317.7 318.5 319.5 320.6 319.8 318.6 316.8 314.8 315.4 316.1 317.0 #>  [85] 317.9 318.6 319.7 320.6 321.0 320.6 319.6 317.4 316.3 315.4 316.7 317.7 #>  [97] 318.7 319.1 319.9 321.4 322.2 321.5 319.7 317.8 316.2 316.0 317.1 318.3 #> [109] 319.6    NA    NA    NA 322.2 321.9 320.4 318.7 316.7 316.8 317.8 318.7 #> [121] 319.4 320.4 320.9 322.1 322.2 321.9 321.4 318.8 317.8 317.3 318.9 319.4 #> [133] 320.6 321.6 322.4 323.9 324.0 323.8 322.4 320.4 318.6 318.1 319.8 321.1 #> [145] 322.1 322.5 323.0 324.4 325.0 324.1 322.6 320.9 319.3 319.3 320.7 322.0 #> [157] 322.6 323.1 323.9 325.0 325.6 325.4 324.1 322.0 320.4 320.2 321.3 322.8 #> [169] 324.0 324.4 325.6 326.7 327.3 326.8 325.9 323.7 322.4 321.8 322.9 324.1 #> [181] 325.0 326.0 326.9 328.1 328.1 327.7 326.4 324.7 323.1 323.2 324.0 325.1 #> [193] 326.2 326.7 327.2 327.8 328.9 328.6 327.3 325.5 323.4 323.6 324.8 326.0 #> [205] 326.8 327.6 327.8 329.7 330.1 329.1 328.1 326.3 324.9 325.1 326.5 327.6 #> [217] 328.5 329.6 330.3 331.5 332.5 332.1 330.9 329.3 327.5 327.2 328.2 328.6 #> [229] 329.4 330.7 331.5 332.6 333.2 332.2 331.1 329.1 327.3 327.3 328.3 329.6 #> [241] 330.7 331.5 331.9 333.2 333.9 333.4 332.0 329.9 328.5 328.3 329.4    NA #> [253] 331.6 332.8 333.5 334.6 334.8 334.0 333.1 330.7 328.9 328.8 330.1 331.6 #> [265] 332.7 333.1 334.9 336.1 336.9 336.2 334.9 332.6 331.3 331.3 332.4 333.6 #> [277] 334.9 335.2 336.7 337.7 338.0 338.0 336.4 334.4 332.4 332.4 333.8 334.9 #> [289] 336.1 336.7 338.3 338.9 339.2 339.3 337.5 335.8 334.0 334.2 335.3 336.8 #> [301] 337.9 338.3 340.0 340.9 341.5 341.3 339.4 337.7 336.2 336.1 337.3 338.3 #> [313] 339.3 340.6 341.6 342.5 343.0 342.5 340.8 338.4 336.9 337.1 338.6 339.9 #> [325] 341.0 341.7 342.8 344.0 344.6 343.8 342.3 340.1 338.3 338.3 339.6 340.9 #> [337] 341.7 342.9 343.3 345.2 346.0 345.6 344.2 342.3 340.4 340.4 341.6 343.1 #> [349] 344.1 344.8 345.5    NA 347.6 347.0 345.5 343.6 341.4 341.7 343.1 344.7 #> [361] 345.2 346.2 347.7 348.3 349.1 348.4 346.7 345.0 343.3 343.1 344.5 345.9 #> [373] 346.6 347.3 348.0 349.8 350.4 349.9 348.2 346.1 345.2 344.5 345.9 347.2 #> [385] 348.5 348.7 349.7 351.3 352.1 351.5 350.1 348.1 346.5 346.6 348.0 349.2 #> [397] 350.4 351.6 352.4 353.7 354.2 353.7 352.7 350.4 348.9 349.1 350.2 351.4 #> [409] 352.9 353.3 354.0 355.6 355.9 355.4 354.0 351.8 350.1 350.2 351.5 352.9 #> [421] 353.8 355.0 355.7 356.3 357.3 356.3 354.8 353.0 351.3 351.6 353.1 354.3 #> [433] 354.8 355.7 357.2 358.7 359.1 358.1 356.2 353.9 352.2 352.4 353.8 355.1 #> [445] 356.2 357.1 357.9 359.1 359.6 359.3 357.0 354.9 353.0 353.3 354.3 355.6 #> [457] 357.0 357.3 358.5 359.3 360.2 359.5 357.3 355.6 354.0 354.1 355.4 356.9 #> [469] 358.2 358.9 360.0 361.2 361.6 360.8 359.4 357.5 355.7 356.1 357.5 359.0 #> [481] 359.9 360.9 361.8 363.3 363.7 363.2 361.6 359.1 358.2 358.0 359.4 360.7 #> [493] 362.1 363.2 364.2 364.6 365.1 364.9 363.6 361.4 359.5 359.6 360.9 362.2 #> [505] 363.1 364.0 364.5 366.4 366.6 365.6 364.3 362.2 360.3 360.8 362.5 364.4 #> [517] 365.3 366.0 367.2 368.7 369.4 369.0 367.8 365.9 364.0 364.4 365.5 367.1 #> [529] 368.2 369.1 369.7 371.0 371.0 370.3 369.4 366.9 364.8 365.4 366.7 368.1 #> [541] 369.3 369.5 370.6 371.8 371.6 371.7 369.9 368.1 367.0 367.0 368.4 369.7 #> [553] 370.6 371.5 372.4 373.4 373.9 373.2 371.5 369.6 368.2 368.4 369.8 371.2 #> [565] 372.5 373.2 374.1 375.0 375.8 375.5 374.0 371.9 370.8 370.6 372.2 373.8 #> [577] 374.9 375.6 376.4 377.7 378.6 378.3 376.7 374.4 373.2 373.1 374.7 376.0 #> [589] 377.0 377.9 378.9 380.4 380.6 379.7 377.5 376.0 374.2 374.5 376.2 377.5 #> [601] 378.5 379.7 380.8 382.3 382.4 382.2 380.7 378.7 376.7 377.0 378.4 380.1 #> [613] 381.4 382.2 382.7 384.6 385.0 384.1 382.5 380.4 378.9 379.1 380.1 381.8 #> [625] 382.9 383.9 384.6 386.5 386.6 386.1 384.5 382.0 381.0 381.1 382.4 383.9 #> [637] 385.5 385.8 386.0 387.2 388.5 387.8 386.4 384.1 383.2 383.0 384.2 385.6 #> [649] 386.9 387.5 388.8 389.6 390.1 389.5 388.0 386.1 384.7 384.4 386.0 387.4 #> [661] 388.7 390.2 391.2 392.5 393.0 392.1 390.2 388.4 386.9 387.2 388.7 389.8 #> [673] 391.3 391.9 392.6 393.2 394.2 393.7 392.5 390.1 389.1 389.0 390.3 391.9 #> [685] 393.1 393.9 394.4 396.2 396.7 395.7 394.4 392.4 391.1 391.1 393.0 394.3 #> [697] 395.6 396.8 397.4 398.4 399.8 398.6 397.3 395.2 393.4 393.7 395.2 396.8 #> [709] 397.9 398.0 399.8 401.4 401.8 401.2 399.1 397.0 395.4 396.0 397.3 398.9 #> [721] 400.0 400.3 401.5 403.3 404.0 402.8 401.3 398.9 397.6 398.3 400.2 401.9 #> [733] 402.5 404.0 404.8 407.4 407.7 406.8 404.4 402.2 401.0 401.6 403.5 404.4 #> [745] 406.1 406.4 407.2 409.0 409.6 408.8 407.1 405.1 403.4 403.6 405.1 406.8 #> [757] 408.0 408.4 409.5 410.3 411.2    NA    NA    NA    NA    NA    NA    NA #> attr(,\"label\") #> [1] \"[CO2 atmosphérique]\" #> attr(,\"units\") #> [1] \"ppm\""},{"path":"https://www.sciviews.org/data.io/reference/read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data in R in different formats — read","title":"Read data in R in different formats — read","text":"Read return R object data disk, URL, packages.","code":""},{"path":"https://www.sciviews.org/data.io/reference/read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data in R in different formats — read","text":"","code":"read(   file,   type = NULL,   header = \"#\",   header.max = 50L,   skip = 0L,   locale = default_locale(),   lang = getOption(\"data.io_lang\", \"en\"),   lang_encoding = \"UTF-8\",   as_dataframe = FALSE,   as_labelled = FALSE,   comments = NULL,   package = NULL,   sidecar_file = TRUE,   fun_list = NULL,   hfun = NULL,   fun = NULL,   data,   cache_file = NULL,   method = \"auto\",   quiet = FALSE,   force = FALSE,   ... )  type_from_extension(file, full = FALSE)  hread_text(file, header.max, skip = 0L, locale = default_locale(), ...)  hread_xls(file, header.max, skip = 0L, locale = default_locale(), ...)  hread_xlsx(file, header.max, skip = 0L, locale = default_locale(), ...)  # S3 method for subsettable_type $(x, name)  # S3 method for read_function_subset .DollarNames(x, pattern = \"\")"},{"path":"https://www.sciviews.org/data.io/reference/read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data in R in different formats — read","text":"file path file read, name dataset get R package (case, must provide package= argument). type type (format) data read. header character use header comments. header.max maximum lines consider header. skip number lines skip beginning file. locale readr locale object data regarding required correctly interpret country-related items. default value matches R defaults US English + UTF-8 encoding, advised used much possible. lang language use (mainly comment, label units), also factor levels character strings translation exists language spelled uppercase characters (e.g., \"FR\"). default value can set , e.g., options(data.io_lang = \"fr\") French. lang_encoding Encoding used R scripts translation. encoded UTF-8, default. However, argument allows specify different encoding needed. as_dataframe Deprecated: now use options(SciViews.as_dtx = as_XXX) specify want data.frame (as_dtf), data.table (as_dtt, default), tibble (as_dtbl).  try convert resulting object dataframe (inheriting data.frame, tbl tbl_db alias tibble)? FALSE, conversion attempted. Note now, whatever indicate, always assumed FALSE part deprecation! as_labelled variable converted 'labelled' objects. allows keep labels units vector manipulated, can lead incompatibilities R code (hence, FALSE default). comments Comments add created object. package package look dataset. file= provided, list available datasets package displayed. sidecar_file TRUE file name file= + .R found directory, considered code import data sourced local = TRUE, chdir = TRUE verbose = FALSE. script must create object named dataset, result returned function. advised encode script UTF-8, default value, possible specify different encoding lang_encoding= parameter. fun_list table correspondence types, read, write functions. hfun function read header (lines starting special mark, usually '#' beginning file). function must arguments hread_text() return character string first header.max lines. fun function delegate reading data. NULL (default), function chosen fun_list. data synonym file= (name makes sense dataset loaded package). use data= file= time. cache_file path local file use cache file downloaded (http://, https://, ftp://, file:// protocols). cache_file already exists, data read cache, except force = TRUE, see . Otherwise, data saved used. cache_file = NULL (default), temporary file used data read Internet every time. cache mechanism particularly useful provide data associated git repository. Put cache_file .gitignore use cache_file= code (force = FALSE). way, data downloaded freshly cloned repository, included versioning system (useful large datasets). method downloading method used (\"auto\" default), see utils::download.file(). quiet case download files, silently (TRUE) provide feedback progression bar (FALSE, default)? force TRUE URL provided file= path cache_file=, content downloaded time, even cache file already exists (overwrites ). default, FALSE, useful setting make good use cache mechanism. ... arguments passed function fun=. full return full extension, like csv.tar.gz (TRUE), main extension, like csv (FALSE, default). x subsettable_type function. name value use type= argument. pattern regular expression list matching names.","code":""},{"path":"https://www.sciviews.org/data.io/reference/read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data in R in different formats — read","text":"R object data (class depends data read).","code":""},{"path":"https://www.sciviews.org/data.io/reference/read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read data in R in different formats — read","text":"read() allows unique entry point read various kinds data, delegates actual work various functions dispatched across several R packages. See getOption(\"read_write\").","code":""},{"path":[]},{"path":"https://www.sciviews.org/data.io/reference/read.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read data in R in different formats — read","text":"Philippe Grosjean phgrosjean@sciviews.org","code":""},{"path":"https://www.sciviews.org/data.io/reference/read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data in R in different formats — read","text":"","code":"# Use of read() as a more flexible substitute to data() (can change dataset # name and syntax more similar to read R datasets and datasets from files) read() # List all available datasets in your installed version of R # List datasets in one particular package read(package = \"data.io\")  # Read one dataset from this package, possibly changing its name (urchin <- read(\"urchin_bio\", package = \"data.io\")) #>       origin diameter1 diameter2 height buoyant_weight weight solid_parts #>       <fctr>     <num>     <num>  <num>          <num>  <num>       <num> #>   1: Fishery       9.9      10.2    5.0             NA 0.5215      0.4777 #>   2: Fishery      10.5      10.6    5.7             NA 0.6418      0.5891 #>   3: Fishery      10.8      10.8    5.2             NA 0.7336      0.6770 #>   4: Fishery       9.6       9.3    4.6             NA 0.3697      0.3438 #>   5: Fishery      10.4      10.7    4.8             NA 0.6097      0.5587 #>  ---                                                                      #> 417:    Farm      16.7      17.2    8.5         0.5674 2.4300      2.2900 #> 418:    Farm      16.5      16.5    7.9         0.5472 2.3200      2.1800 #> 419:    Farm      16.8      16.7    8.2         0.4864 2.2200      2.1300 #> 420:    Farm      17.3      17.2    8.5         0.4864 2.5200      2.3400 #> 421:    Farm      17.0      16.6    7.9         0.4357 2.0500      1.9800 #>      integuments dry_integuments digestive_tract dry_digestive_tract gonads #>            <num>           <num>           <num>               <num>  <num> #>   1:      0.3658              NA          0.0525              0.0079 0.0000 #>   2:      0.4447              NA          0.0482              0.0090 0.0000 #>   3:      0.5326              NA          0.0758              0.0134 0.0000 #>   4:      0.2661              NA          0.0442              0.0064 0.0000 #>   5:      0.4058              NA          0.0743              0.0117 0.0000 #>  ---                                                                        #> 417:      1.8400            1.02          0.1661              0.0229 0.0215 #> 418:      1.8000            1.01          0.0977              0.0147 0.0253 #> 419:      1.6300            0.88          0.1704              0.0208 0.0154 #> 420:      1.7200            0.89          0.1444              0.0167 0.0237 #> 421:      1.4300            0.83          0.1462              0.0212 0.0266 #>      dry_gonads skeleton lantern   test spines maturity    sex #>           <num>    <num>   <num>  <num>  <num>    <int> <fctr> #>   1:     0.0000   0.1793  0.0211 0.0587 0.0995        0   <NA> #>   2:     0.0000   0.1880  0.0205 0.0622 0.1053        0   <NA> #>   3:     0.0000   0.2354  0.0254 0.0836 0.1263        0   <NA> #>   4:     0.0000   0.0630  0.0167 0.0180 0.0283        0   <NA> #>   5:     0.0000       NA      NA     NA     NA        0   <NA> #>  ---                                                           #> 417:     0.0034   0.9046  0.0750 0.3399 0.4896        0   <NA> #> 418:     0.0051   0.8965  0.0908 0.3189 0.4868        0   <NA> #> 419:     0.0020   0.7714  0.0877 0.2961 0.3876        0   <NA> #> 420:     0.0032   0.7938  0.0772 0.3077 0.4090        0   <NA> #> 421:     0.0051   0.7421  0.0723 0.2689 0.4009        0   <NA> # Same, but using labels in French (urchin <- read(\"urchin_bio\", package = \"data.io\", lang = \"fr\")) #>       origin diameter1 diameter2 height buoyant_weight weight solid_parts #>       <fctr>     <num>     <num>  <num>          <num>  <num>       <num> #>   1: Fishery       9.9      10.2    5.0             NA 0.5215      0.4777 #>   2: Fishery      10.5      10.6    5.7             NA 0.6418      0.5891 #>   3: Fishery      10.8      10.8    5.2             NA 0.7336      0.6770 #>   4: Fishery       9.6       9.3    4.6             NA 0.3697      0.3438 #>   5: Fishery      10.4      10.7    4.8             NA 0.6097      0.5587 #>  ---                                                                      #> 417:    Farm      16.7      17.2    8.5         0.5674 2.4300      2.2900 #> 418:    Farm      16.5      16.5    7.9         0.5472 2.3200      2.1800 #> 419:    Farm      16.8      16.7    8.2         0.4864 2.2200      2.1300 #> 420:    Farm      17.3      17.2    8.5         0.4864 2.5200      2.3400 #> 421:    Farm      17.0      16.6    7.9         0.4357 2.0500      1.9800 #>      integuments dry_integuments digestive_tract dry_digestive_tract gonads #>            <num>           <num>           <num>               <num>  <num> #>   1:      0.3658              NA          0.0525              0.0079 0.0000 #>   2:      0.4447              NA          0.0482              0.0090 0.0000 #>   3:      0.5326              NA          0.0758              0.0134 0.0000 #>   4:      0.2661              NA          0.0442              0.0064 0.0000 #>   5:      0.4058              NA          0.0743              0.0117 0.0000 #>  ---                                                                        #> 417:      1.8400            1.02          0.1661              0.0229 0.0215 #> 418:      1.8000            1.01          0.0977              0.0147 0.0253 #> 419:      1.6300            0.88          0.1704              0.0208 0.0154 #> 420:      1.7200            0.89          0.1444              0.0167 0.0237 #> 421:      1.4300            0.83          0.1462              0.0212 0.0266 #>      dry_gonads skeleton lantern   test spines maturity    sex #>           <num>    <num>   <num>  <num>  <num>    <int> <fctr> #>   1:     0.0000   0.1793  0.0211 0.0587 0.0995        0   <NA> #>   2:     0.0000   0.1880  0.0205 0.0622 0.1053        0   <NA> #>   3:     0.0000   0.2354  0.0254 0.0836 0.1263        0   <NA> #>   4:     0.0000   0.0630  0.0167 0.0180 0.0283        0   <NA> #>   5:     0.0000       NA      NA     NA     NA        0   <NA> #>  ---                                                           #> 417:     0.0034   0.9046  0.0750 0.3399 0.4896        0   <NA> #> 418:     0.0051   0.8965  0.0908 0.3189 0.4868        0   <NA> #> 419:     0.0020   0.7714  0.0877 0.2961 0.3876        0   <NA> #> 420:     0.0032   0.7938  0.0772 0.3077 0.4090        0   <NA> #> 421:     0.0051   0.7421  0.0723 0.2689 0.4009        0   <NA> # ... and also the levels of factors in French (note: uppercase FR) (urchin <- read(\"urchin_bio\", package = \"data.io\", lang = \"FR\")) #>        origin diameter1 diameter2 height buoyant_weight weight solid_parts #>        <fctr>     <num>     <num>  <num>          <num>  <num>       <num> #>   1: Pêcherie       9.9      10.2    5.0             NA 0.5215      0.4777 #>   2: Pêcherie      10.5      10.6    5.7             NA 0.6418      0.5891 #>   3: Pêcherie      10.8      10.8    5.2             NA 0.7336      0.6770 #>   4: Pêcherie       9.6       9.3    4.6             NA 0.3697      0.3438 #>   5: Pêcherie      10.4      10.7    4.8             NA 0.6097      0.5587 #>  ---                                                                       #> 417:  Culture      16.7      17.2    8.5         0.5674 2.4300      2.2900 #> 418:  Culture      16.5      16.5    7.9         0.5472 2.3200      2.1800 #> 419:  Culture      16.8      16.7    8.2         0.4864 2.2200      2.1300 #> 420:  Culture      17.3      17.2    8.5         0.4864 2.5200      2.3400 #> 421:  Culture      17.0      16.6    7.9         0.4357 2.0500      1.9800 #>      integuments dry_integuments digestive_tract dry_digestive_tract gonads #>            <num>           <num>           <num>               <num>  <num> #>   1:      0.3658              NA          0.0525              0.0079 0.0000 #>   2:      0.4447              NA          0.0482              0.0090 0.0000 #>   3:      0.5326              NA          0.0758              0.0134 0.0000 #>   4:      0.2661              NA          0.0442              0.0064 0.0000 #>   5:      0.4058              NA          0.0743              0.0117 0.0000 #>  ---                                                                        #> 417:      1.8400            1.02          0.1661              0.0229 0.0215 #> 418:      1.8000            1.01          0.0977              0.0147 0.0253 #> 419:      1.6300            0.88          0.1704              0.0208 0.0154 #> 420:      1.7200            0.89          0.1444              0.0167 0.0237 #> 421:      1.4300            0.83          0.1462              0.0212 0.0266 #>      dry_gonads skeleton lantern   test spines maturity    sex #>           <num>    <num>   <num>  <num>  <num>    <int> <fctr> #>   1:     0.0000   0.1793  0.0211 0.0587 0.0995        0   <NA> #>   2:     0.0000   0.1880  0.0205 0.0622 0.1053        0   <NA> #>   3:     0.0000   0.2354  0.0254 0.0836 0.1263        0   <NA> #>   4:     0.0000   0.0630  0.0167 0.0180 0.0283        0   <NA> #>   5:     0.0000       NA      NA     NA     NA        0   <NA> #>  ---                                                           #> 417:     0.0034   0.9046  0.0750 0.3399 0.4896        0   <NA> #> 418:     0.0051   0.8965  0.0908 0.3189 0.4868        0   <NA> #> 419:     0.0020   0.7714  0.0877 0.2961 0.3876        0   <NA> #> 420:     0.0032   0.7938  0.0772 0.3077 0.4090        0   <NA> #> 421:     0.0051   0.7421  0.0723 0.2689 0.4009        0   <NA>  # Read one dataset from another package, but with labels and comments data(iris) # The R way: you got the initial datasets # Same result, using read() ir2 <- read(\"iris\", package = \"datasets\", lang = NULL) # ir2 records that it comes from datasets::iris attr(comment(ir2), \"src\") #> [1] \"datasets::iris\" # otherwise, it is identical to iris, except is may be a data.table or a # tibble, depending on user preferences comment(ir2) <- NULL # Force coercion into a data.frame ir2 <- svBase::as_dtf(ir2) identical(iris, ir2) #> [1] TRUE # More interesting: you can get an enhanced version of iris with read(): # (note that variable names ar in snake-case now!) (ir3 <- read(\"iris\", package = \"datasets\")) #>      sepal_length sepal_width petal_length petal_width   species #>             <num>       <num>        <num>       <num>    <fctr> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica class(ir3) #> [1] \"data.table\" \"data.frame\" comment(ir3) #> [1] \"The 'iris' from 'datasets', but with variables names in snake_case\" #> [2] \"(Sepal.Length -> sepal_length, Species -> species).\"                #> attr(,\"lang\") #> [1] \"en\" #> attr(,\"lang_encoding\") #> [1] \"UTF-8\" #> attr(,\"src\") #> [1] \"datasets::iris\" ir3$sepal_length #>   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 #>  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 #>  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 #>  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 #>  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 #>  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 #> [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 #> [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 #> [145] 6.7 6.7 6.3 6.5 6.2 5.9 #> attr(,\"label\") #> [1] \"Length of the sepals\" #> attr(,\"units\") #> [1] \"cm\" # ... and you can get it in French too! (ir_fr <- read(\"iris\", package = \"datasets\", lang = \"fr\")) #>      sepal_length sepal_width petal_length petal_width   species #>             <num>       <num>        <num>       <num>    <fctr> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica class(ir_fr) #> [1] \"data.table\" \"data.frame\" comment(ir_fr) #> [1] \"Jeu de données 'iris' de 'datasets', mais avec noms de variables modifiées\" #> [2] \"(Sepal.Length -> sepal_length, Species -> species).\"                        #> attr(,\"lang\") #> [1] \"fr\" #> attr(,\"lang_encoding\") #> [1] \"UTF-8\" #> attr(,\"src\") #> [1] \"datasets::iris\" ir_fr$sepal_length #>   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 #>  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 #>  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 #>  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 #>  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 #>  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 #> [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 #> [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 #> [145] 6.7 6.7 6.3 6.5 6.2 5.9 #> attr(,\"label\") #> [1] \"Longueur des sépales\" #> attr(,\"units\") #> [1] \"cm\"  # Sometimes, datasets are more deeply reworked. For instance, trees has # variables in imperial units (in, ft, and cubic ft), but it is automatically # reworked by read() into metric variables (m or m^3): data(trees) head(trees) #>   Girth Height Volume #> 1   8.3     70   10.3 #> 2   8.6     65   10.3 #> 3   8.8     63   10.2 #> 4  10.5     72   16.4 #> 5  10.7     81   18.8 #> 6  10.8     83   19.7 (trees2 <- read(\"trees\", package = \"datasets\")) #>     diameter height volume #>        <num>  <num>  <num> #>  1:    0.211   21.3  0.292 #>  2:    0.218   19.8  0.292 #>  3:    0.224   19.2  0.289 #>  4:    0.267   21.9  0.464 #>  5:    0.272   24.7  0.532 #>  6:    0.274   25.3  0.558 #>  7:    0.279   20.1  0.442 #>  8:    0.279   22.9  0.515 #>  9:    0.282   24.4  0.640 #> 10:    0.284   22.9  0.563 #> 11:    0.287   24.1  0.685 #> 12:    0.290   23.2  0.595 #> 13:    0.290   23.2  0.606 #> 14:    0.297   21.0  0.603 #> 15:    0.305   22.9  0.541 #> 16:    0.328   22.6  0.629 #> 17:    0.328   25.9  0.957 #> 18:    0.338   26.2  0.776 #> 19:    0.348   21.6  0.728 #> 20:    0.351   19.5  0.705 #> 21:    0.356   23.8  0.977 #> 22:    0.361   24.4  0.898 #> 23:    0.368   22.6  1.028 #> 24:    0.406   21.9  1.085 #> 25:    0.414   23.5  1.206 #> 26:    0.439   24.7  1.569 #> 27:    0.444   25.0  1.577 #> 28:    0.455   24.4  1.651 #> 29:    0.457   24.4  1.458 #> 30:    0.457   24.4  1.444 #> 31:    0.523   26.5  2.180 #>     diameter height volume comment(trees2) #> [1] \"The 'trees' from 'datasets' but with variables renamed and in m or m^3\" #> [2] \"(Girth [in] -> diameter [m], Height [ft] -> height [m],\"                #> [3] \"Volume [ft^3] -> volume [m^3]).\"                                        #> attr(,\"lang\") #> [1] \"en\" #> attr(,\"lang_encoding\") #> [1] \"UTF-8\" #> attr(,\"src\") #> [1] \"datasets::trees\" trees2$volume #>  [1] 0.292 0.292 0.289 0.464 0.532 0.558 0.442 0.515 0.640 0.563 0.685 0.595 #> [13] 0.606 0.603 0.541 0.629 0.957 0.776 0.728 0.705 0.977 0.898 1.028 1.085 #> [25] 1.206 1.569 1.577 1.651 1.458 1.444 2.180 #> attr(,\"label\") #> [1] \"Volume of timber\" #> attr(,\"units\") #> [1] \"m^3\" # \\donttest{ # Read from a Github Gist (need to specify the type here!) # (ble <- read$csv(\"http://tinyurl.com/Biostat-Ble\"))  # Various versions of the famous iris dataset (iris <- read(data_example(\"iris.csv\"))) #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #>      Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #>             <num>       <num>        <num>       <num>    <char> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica (iris <- read(data_example(\"iris.csv.zip\"))) #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #>      Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #>             <num>       <num>        <num>       <num>    <char> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica (iris <- read(data_example(\"iris.csv.gz\"))) #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #>      Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #>             <num>       <num>        <num>       <num>    <char> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica (iris <- read(data_example(\"iris.csv.bz2\"))) #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #>      Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #>             <num>       <num>        <num>       <num>    <char> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica (iris <- read(data_example(\"iris.tsv\"))) #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #>      Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #>             <num>       <num>        <num>       <num>    <char> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica (iris <- read(data_example(\"iris.xls\"))) #> New names: #> • `` -> `...1` #>      Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #>             <num>       <num>        <num>       <num>    <char> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica (iris <- read(data_example(\"iris.xlsx\"))) #> New names: #> • `` -> `...1` #>      Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #>             <num>       <num>        <num>       <num>    <char> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica (iris <- read(data_example(\"iris.rds\"))) # Does not tranform into tibble! #>      Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #>             <num>       <num>        <num>       <num>    <fctr> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica #(iris <- read(data_example(\"iris.syd\"))) ## #(iris <- read(data_example(\"iris.csvy\"))) ## #(iris <- read(data_example(\"iris.csvy.zip\"))) ##  # A file with an header both in English (default) and in French (iris <- read(data_example(\"iris_short_header.csv\"))) #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #>      Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #>        <labelled>  <labelled>   <labelled>  <labelled> <labelled> #>   1:          5.1         3.5          1.4         0.2     setosa #>   2:          4.9         3.0          1.4         0.2     setosa #>   3:          4.7         3.2          1.3         0.2     setosa #>   4:          4.6         3.1          1.5         0.2     setosa #>   5:          5.0         3.6          1.4         0.2     setosa #>  ---                                                              #> 146:          6.7         3.0          5.2         2.3  virginica #> 147:          6.3         2.5          5.0         1.9  virginica #> 148:          6.5         3.0          5.2         2.0  virginica #> 149:          6.2         3.4          5.4         2.3  virginica #> 150:          5.9         3.0          5.1         1.8  virginica (iris_fr <- read(data_example(\"iris_short_header.csv\"), lang = \"fr\")) #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #>      Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #>        <labelled>  <labelled>   <labelled>  <labelled> <labelled> #>   1:          5.1         3.5          1.4         0.2     setosa #>   2:          4.9         3.0          1.4         0.2     setosa #>   3:          4.7         3.2          1.3         0.2     setosa #>   4:          4.6         3.1          1.5         0.2     setosa #>   5:          5.0         3.6          1.4         0.2     setosa #>  ---                                                              #> 146:          6.7         3.0          5.2         2.3  virginica #> 147:          6.3         2.5          5.0         1.9  virginica #> 148:          6.5         3.0          5.2         2.0  virginica #> 149:          6.2         3.4          5.4         2.3  virginica #> 150:          5.9         3.0          5.1         1.8  virginica # Headers are also recognized in xls/xlsx files (iris_fr <- read(data_example(\"iris_short_header.xls\"), lang = \"fr\")) #> New names: #> • `` -> `...1` #>      Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #>        <labelled>  <labelled>   <labelled>  <labelled> <labelled> #>   1:          5.1         3.5          1.4         0.2     setosa #>   2:          4.9         3.0          1.4         0.2     setosa #>   3:          4.7         3.2          1.3         0.2     setosa #>   4:          4.6         3.1          1.5         0.2     setosa #>   5:          5.0         3.6          1.4         0.2     setosa #>  ---                                                              #> 146:          6.7         3.0          5.2         2.3  virginica #> 147:          6.3         2.5          5.0         1.9  virginica #> 148:          6.5         3.0          5.2         2.0  virginica #> 149:          6.2         3.4          5.4         2.3  virginica #> 150:          5.9         3.0          5.1         1.8  virginica  # Read a file with a sidecar file (same name + '.R') (iris <- read(data_example(\"iris_sidecar.csv\"))) # lang = \"en\" by default #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: number of items to replace is not a multiple of replacement length #>      sepal_length sepal_width petal_length petal_width   species #>             <num>       <num>        <num>       <num>    <fctr> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica (iris <- read(data_example(\"iris_sidecar.csv\"), lang = \"EN\")) # Full lang #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: number of items to replace is not a multiple of replacement length #>      sepal_length sepal_width petal_length petal_width      species #>             <num>       <num>        <num>       <num>       <fctr> #>   1:          5.1         3.5          1.4         0.2    I. setosa #>   2:          4.9         3.0          1.4         0.2    I. setosa #>   3:          4.7         3.2          1.3         0.2    I. setosa #>   4:          4.6         3.1          1.5         0.2    I. setosa #>   5:          5.0         3.6          1.4         0.2    I. setosa #>  ---                                                                #> 146:          6.7         3.0          5.2         2.3 I. virginica #> 147:          6.3         2.5          5.0         1.9 I. virginica #> 148:          6.5         3.0          5.2         2.0 I. virginica #> 149:          6.2         3.4          5.4         2.3 I. virginica #> 150:          5.9         3.0          5.1         1.8 I. virginica (iris <- read(data_example(\"iris_sidecar.csv\"), lang = \"en_us\")) # US (in) #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: number of items to replace is not a multiple of replacement length #>      sepal_length sepal_width petal_length petal_width   species #>             <num>       <num>        <num>       <num>    <fctr> #>   1:     2.007874    1.377953    0.5511811  0.07874016    setosa #>   2:     1.929134    1.181102    0.5511811  0.07874016    setosa #>   3:     1.850394    1.259843    0.5118110  0.07874016    setosa #>   4:     1.811024    1.220472    0.5905512  0.07874016    setosa #>   5:     1.968504    1.417323    0.5511811  0.07874016    setosa #>  ---                                                             #> 146:     2.637795    1.181102    2.0472441  0.90551181 virginica #> 147:     2.480315    0.984252    1.9685039  0.74803150 virginica #> 148:     2.559055    1.181102    2.0472441  0.78740157 virginica #> 149:     2.440945    1.338583    2.1259843  0.90551181 virginica #> 150:     2.322835    1.181102    2.0078740  0.70866142 virginica (iris <- read(data_example(\"iris_sidecar.csv\"), lang = \"fr\")) # French #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: number of items to replace is not a multiple of replacement length #>      sepal_length sepal_width petal_length petal_width   species #>             <num>       <num>        <num>       <num>    <fctr> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica (iris <- read(data_example(\"iris_sidecar.csv\"), lang = \"FR_BE\")) # Belgian #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: number of items to replace is not a multiple of replacement length #>      sepal_length sepal_width petal_length petal_width      species #>             <num>       <num>        <num>       <num>       <fctr> #>   1:          5.1         3.5          1.4         0.2    I. setosa #>   2:          4.9         3.0          1.4         0.2    I. setosa #>   3:          4.7         3.2          1.3         0.2    I. setosa #>   4:          4.6         3.1          1.5         0.2    I. setosa #>   5:          5.0         3.6          1.4         0.2    I. setosa #>  ---                                                                #> 146:          6.7         3.0          5.2         2.3 I. virginica #> 147:          6.3         2.5          5.0         1.9 I. virginica #> 148:          6.5         3.0          5.2         2.0 I. virginica #> 149:          6.2         3.4          5.4         2.3 I. virginica #> 150:          5.9         3.0          5.1         1.8 I. virginica (iris <- read(data_example(\"iris_sidecar.csv\"), lang = NULL)) # No labels #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #>      Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #>             <num>       <num>        <num>       <num>    <fctr> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica  # Require the feather package #(iris <- read(data_example(\"iris.feather\"))) # Not available for all Win  # Challenging datasets from the readr package library(readr) (mtcars <- read(readr_example(\"mtcars.csv\"))) #> Rows: 32 Columns: 11 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #>       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>     <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> #>  1:  21.0     6 160.0   110  3.90 2.620 16.46     0     1     4     4 #>  2:  21.0     6 160.0   110  3.90 2.875 17.02     0     1     4     4 #>  3:  22.8     4 108.0    93  3.85 2.320 18.61     1     1     4     1 #>  4:  21.4     6 258.0   110  3.08 3.215 19.44     1     0     3     1 #>  5:  18.7     8 360.0   175  3.15 3.440 17.02     0     0     3     2 #>  6:  18.1     6 225.0   105  2.76 3.460 20.22     1     0     3     1 #>  7:  14.3     8 360.0   245  3.21 3.570 15.84     0     0     3     4 #>  8:  24.4     4 146.7    62  3.69 3.190 20.00     1     0     4     2 #>  9:  22.8     4 140.8    95  3.92 3.150 22.90     1     0     4     2 #> 10:  19.2     6 167.6   123  3.92 3.440 18.30     1     0     4     4 #> 11:  17.8     6 167.6   123  3.92 3.440 18.90     1     0     4     4 #> 12:  16.4     8 275.8   180  3.07 4.070 17.40     0     0     3     3 #> 13:  17.3     8 275.8   180  3.07 3.730 17.60     0     0     3     3 #> 14:  15.2     8 275.8   180  3.07 3.780 18.00     0     0     3     3 #> 15:  10.4     8 472.0   205  2.93 5.250 17.98     0     0     3     4 #> 16:  10.4     8 460.0   215  3.00 5.424 17.82     0     0     3     4 #> 17:  14.7     8 440.0   230  3.23 5.345 17.42     0     0     3     4 #> 18:  32.4     4  78.7    66  4.08 2.200 19.47     1     1     4     1 #> 19:  30.4     4  75.7    52  4.93 1.615 18.52     1     1     4     2 #> 20:  33.9     4  71.1    65  4.22 1.835 19.90     1     1     4     1 #> 21:  21.5     4 120.1    97  3.70 2.465 20.01     1     0     3     1 #> 22:  15.5     8 318.0   150  2.76 3.520 16.87     0     0     3     2 #> 23:  15.2     8 304.0   150  3.15 3.435 17.30     0     0     3     2 #> 24:  13.3     8 350.0   245  3.73 3.840 15.41     0     0     3     4 #> 25:  19.2     8 400.0   175  3.08 3.845 17.05     0     0     3     2 #> 26:  27.3     4  79.0    66  4.08 1.935 18.90     1     1     4     1 #> 27:  26.0     4 120.3    91  4.43 2.140 16.70     0     1     5     2 #> 28:  30.4     4  95.1   113  3.77 1.513 16.90     1     1     5     2 #> 29:  15.8     8 351.0   264  4.22 3.170 14.50     0     1     5     4 #> 30:  19.7     6 145.0   175  3.62 2.770 15.50     0     1     5     6 #> 31:  15.0     8 301.0   335  3.54 3.570 14.60     0     1     5     8 #> 32:  21.4     4 121.0   109  4.11 2.780 18.60     1     1     4     2 #>       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb (mtcars <- read(readr_example(\"mtcars.csv.zip\"))) #> Rows: 32 Columns: 11 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #>       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>     <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> #>  1:  21.0     6 160.0   110  3.90 2.620 16.46     0     1     4     4 #>  2:  21.0     6 160.0   110  3.90 2.875 17.02     0     1     4     4 #>  3:  22.8     4 108.0    93  3.85 2.320 18.61     1     1     4     1 #>  4:  21.4     6 258.0   110  3.08 3.215 19.44     1     0     3     1 #>  5:  18.7     8 360.0   175  3.15 3.440 17.02     0     0     3     2 #>  6:  18.1     6 225.0   105  2.76 3.460 20.22     1     0     3     1 #>  7:  14.3     8 360.0   245  3.21 3.570 15.84     0     0     3     4 #>  8:  24.4     4 146.7    62  3.69 3.190 20.00     1     0     4     2 #>  9:  22.8     4 140.8    95  3.92 3.150 22.90     1     0     4     2 #> 10:  19.2     6 167.6   123  3.92 3.440 18.30     1     0     4     4 #> 11:  17.8     6 167.6   123  3.92 3.440 18.90     1     0     4     4 #> 12:  16.4     8 275.8   180  3.07 4.070 17.40     0     0     3     3 #> 13:  17.3     8 275.8   180  3.07 3.730 17.60     0     0     3     3 #> 14:  15.2     8 275.8   180  3.07 3.780 18.00     0     0     3     3 #> 15:  10.4     8 472.0   205  2.93 5.250 17.98     0     0     3     4 #> 16:  10.4     8 460.0   215  3.00 5.424 17.82     0     0     3     4 #> 17:  14.7     8 440.0   230  3.23 5.345 17.42     0     0     3     4 #> 18:  32.4     4  78.7    66  4.08 2.200 19.47     1     1     4     1 #> 19:  30.4     4  75.7    52  4.93 1.615 18.52     1     1     4     2 #> 20:  33.9     4  71.1    65  4.22 1.835 19.90     1     1     4     1 #> 21:  21.5     4 120.1    97  3.70 2.465 20.01     1     0     3     1 #> 22:  15.5     8 318.0   150  2.76 3.520 16.87     0     0     3     2 #> 23:  15.2     8 304.0   150  3.15 3.435 17.30     0     0     3     2 #> 24:  13.3     8 350.0   245  3.73 3.840 15.41     0     0     3     4 #> 25:  19.2     8 400.0   175  3.08 3.845 17.05     0     0     3     2 #> 26:  27.3     4  79.0    66  4.08 1.935 18.90     1     1     4     1 #> 27:  26.0     4 120.3    91  4.43 2.140 16.70     0     1     5     2 #> 28:  30.4     4  95.1   113  3.77 1.513 16.90     1     1     5     2 #> 29:  15.8     8 351.0   264  4.22 3.170 14.50     0     1     5     4 #> 30:  19.7     6 145.0   175  3.62 2.770 15.50     0     1     5     6 #> 31:  15.0     8 301.0   335  3.54 3.570 14.60     0     1     5     8 #> 32:  21.4     4 121.0   109  4.11 2.780 18.60     1     1     4     2 #>       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb (mtcars <- read(readr_example(\"mtcars.csv.bz2\"))) #> Rows: 32 Columns: 11 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #>       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>     <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> #>  1:  21.0     6 160.0   110  3.90 2.620 16.46     0     1     4     4 #>  2:  21.0     6 160.0   110  3.90 2.875 17.02     0     1     4     4 #>  3:  22.8     4 108.0    93  3.85 2.320 18.61     1     1     4     1 #>  4:  21.4     6 258.0   110  3.08 3.215 19.44     1     0     3     1 #>  5:  18.7     8 360.0   175  3.15 3.440 17.02     0     0     3     2 #>  6:  18.1     6 225.0   105  2.76 3.460 20.22     1     0     3     1 #>  7:  14.3     8 360.0   245  3.21 3.570 15.84     0     0     3     4 #>  8:  24.4     4 146.7    62  3.69 3.190 20.00     1     0     4     2 #>  9:  22.8     4 140.8    95  3.92 3.150 22.90     1     0     4     2 #> 10:  19.2     6 167.6   123  3.92 3.440 18.30     1     0     4     4 #> 11:  17.8     6 167.6   123  3.92 3.440 18.90     1     0     4     4 #> 12:  16.4     8 275.8   180  3.07 4.070 17.40     0     0     3     3 #> 13:  17.3     8 275.8   180  3.07 3.730 17.60     0     0     3     3 #> 14:  15.2     8 275.8   180  3.07 3.780 18.00     0     0     3     3 #> 15:  10.4     8 472.0   205  2.93 5.250 17.98     0     0     3     4 #> 16:  10.4     8 460.0   215  3.00 5.424 17.82     0     0     3     4 #> 17:  14.7     8 440.0   230  3.23 5.345 17.42     0     0     3     4 #> 18:  32.4     4  78.7    66  4.08 2.200 19.47     1     1     4     1 #> 19:  30.4     4  75.7    52  4.93 1.615 18.52     1     1     4     2 #> 20:  33.9     4  71.1    65  4.22 1.835 19.90     1     1     4     1 #> 21:  21.5     4 120.1    97  3.70 2.465 20.01     1     0     3     1 #> 22:  15.5     8 318.0   150  2.76 3.520 16.87     0     0     3     2 #> 23:  15.2     8 304.0   150  3.15 3.435 17.30     0     0     3     2 #> 24:  13.3     8 350.0   245  3.73 3.840 15.41     0     0     3     4 #> 25:  19.2     8 400.0   175  3.08 3.845 17.05     0     0     3     2 #> 26:  27.3     4  79.0    66  4.08 1.935 18.90     1     1     4     1 #> 27:  26.0     4 120.3    91  4.43 2.140 16.70     0     1     5     2 #> 28:  30.4     4  95.1   113  3.77 1.513 16.90     1     1     5     2 #> 29:  15.8     8 351.0   264  4.22 3.170 14.50     0     1     5     4 #> 30:  19.7     6 145.0   175  3.62 2.770 15.50     0     1     5     6 #> 31:  15.0     8 301.0   335  3.54 3.570 14.60     0     1     5     8 #> 32:  21.4     4 121.0   109  4.11 2.780 18.60     1     1     4     2 #>       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb (challenge <- read(readr_example(\"challenge.csv\"), guess_max = 1001)) #> Rows: 2000 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl  (1): x #> date (1): y #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #>                  x          y #>              <num>     <Date> #>    1:  404.0000000       <NA> #>    2: 4172.0000000       <NA> #>    3: 3004.0000000       <NA> #>    4:  787.0000000       <NA> #>    5:   37.0000000       <NA> #>   ---                         #> 1996:    0.1635163 2018-03-29 #> 1997:    0.4719390 2014-08-04 #> 1998:    0.7183186 2015-08-16 #> 1999:    0.2698786 2020-02-04 #> 2000:    0.6082372 2019-01-06 (massey <- read(readr_example(\"massey-rating.txt\"))) #> [1] \"UCC PAY LAZ KPK  RT   COF BIH DII ENG ACU Rank Team            Conf\\n  1   1   1   1   1     1   1   1   1   1    1 Ohio St          B10 \\n  2   2   2   2   2     2   2   2   4   2    2 Oregon           P12 \\n  3   4   3   4   3     4   3   4   2   3    3 Alabama          SEC \\n  4   3   4   3   4     3   5   3   3   4    4 TCU              B12 \\n  6   6   6   5   5     7   6   5   6  11    5 Michigan St      B10 \\n  7   7   7   6   7     6  11   8   7   8    6 Georgia          SEC \\n  5   5   5   7   6     8   4   6   5   5    7 Florida St       ACC \\n  8   8   9   9  10     5   7   7  10   7    8 Baylor           B12 \\n  9  11   8  13  11    11  12   9  14   9    9 Georgia Tech     ACC \\n 13  10  13  11   8     9  10  11   9  10   10 Mississippi      SEC \\n\" # By default, the type cannot be guessed from the extension # This is a space-separated vaules file (ssv) (massey <- read(readr_example(\"massey-rating.txt\"), type = \"ssv\")) #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   UCC = col_double(), #>   PAY = col_double(), #>   LAZ = col_double(), #>   KPK = col_double(), #>   RT = col_double(), #>   COF = col_double(), #>   BIH = col_double(), #>   DII = col_double(), #>   ENG = col_double(), #>   ACU = col_double(), #>   Rank = col_double(), #>   Team = col_character(), #>   Conf = col_character() #> ) #> Warning: 10 parsing failures. #> row col   expected     actual                                                              file #>   1  -- 13 columns 15 columns '/home/runner/work/_temp/Library/readr/extdata/massey-rating.txt' #>   2  -- 13 columns 14 columns '/home/runner/work/_temp/Library/readr/extdata/massey-rating.txt' #>   3  -- 13 columns 14 columns '/home/runner/work/_temp/Library/readr/extdata/massey-rating.txt' #>   4  -- 13 columns 14 columns '/home/runner/work/_temp/Library/readr/extdata/massey-rating.txt' #>   5  -- 13 columns 15 columns '/home/runner/work/_temp/Library/readr/extdata/massey-rating.txt' #> ... ... .......... .......... ................................................................. #> See problems(...) for more details. #>       UCC   PAY   LAZ   KPK    RT   COF   BIH   DII   ENG   ACU  Rank #>     <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> #>  1:     1     1     1     1     1     1     1     1     1     1     1 #>  2:     2     2     2     2     2     2     2     2     4     2     2 #>  3:     3     4     3     4     3     4     3     4     2     3     3 #>  4:     4     3     4     3     4     3     5     3     3     4     4 #>  5:     6     6     6     5     5     7     6     5     6    11     5 #>  6:     7     7     7     6     7     6    11     8     7     8     6 #>  7:     5     5     5     7     6     8     4     6     5     5     7 #>  8:     8     8     9     9    10     5     7     7    10     7     8 #>  9:     9    11     8    13    11    11    12     9    14     9     9 #> 10:    13    10    13    11     8     9    10    11     9    10    10 #>            Team   Conf #>          <char> <char> #>  1:        Ohio     St #>  2:      Oregon    P12 #>  3:     Alabama    SEC #>  4:         TCU    B12 #>  5:    Michigan     St #>  6:     Georgia    SEC #>  7:     Florida     St #>  8:      Baylor    B12 #>  9:     Georgia   Tech #> 10: Mississippi    SEC # or ... (massey <- read$ssv(readr_example(\"massey-rating.txt\"))) #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   UCC = col_double(), #>   PAY = col_double(), #>   LAZ = col_double(), #>   KPK = col_double(), #>   RT = col_double(), #>   COF = col_double(), #>   BIH = col_double(), #>   DII = col_double(), #>   ENG = col_double(), #>   ACU = col_double(), #>   Rank = col_double(), #>   Team = col_character(), #>   Conf = col_character() #> ) #> Warning: 10 parsing failures. #> row col   expected     actual                                                              file #>   1  -- 13 columns 15 columns '/home/runner/work/_temp/Library/readr/extdata/massey-rating.txt' #>   2  -- 13 columns 14 columns '/home/runner/work/_temp/Library/readr/extdata/massey-rating.txt' #>   3  -- 13 columns 14 columns '/home/runner/work/_temp/Library/readr/extdata/massey-rating.txt' #>   4  -- 13 columns 14 columns '/home/runner/work/_temp/Library/readr/extdata/massey-rating.txt' #>   5  -- 13 columns 15 columns '/home/runner/work/_temp/Library/readr/extdata/massey-rating.txt' #> ... ... .......... .......... ................................................................. #> See problems(...) for more details. #>       UCC   PAY   LAZ   KPK    RT   COF   BIH   DII   ENG   ACU  Rank #>     <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> #>  1:     1     1     1     1     1     1     1     1     1     1     1 #>  2:     2     2     2     2     2     2     2     2     4     2     2 #>  3:     3     4     3     4     3     4     3     4     2     3     3 #>  4:     4     3     4     3     4     3     5     3     3     4     4 #>  5:     6     6     6     5     5     7     6     5     6    11     5 #>  6:     7     7     7     6     7     6    11     8     7     8     6 #>  7:     5     5     5     7     6     8     4     6     5     5     7 #>  8:     8     8     9     9    10     5     7     7    10     7     8 #>  9:     9    11     8    13    11    11    12     9    14     9     9 #> 10:    13    10    13    11     8     9    10    11     9    10    10 #>            Team   Conf #>          <char> <char> #>  1:        Ohio     St #>  2:      Oregon    P12 #>  3:     Alabama    SEC #>  4:         TCU    B12 #>  5:    Michigan     St #>  6:     Georgia    SEC #>  7:     Florida     St #>  8:      Baylor    B12 #>  9:     Georgia   Tech #> 10: Mississippi    SEC (epa <- read$ssv(readr_example(\"epa78.txt\"), col_names = FALSE)) #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   X1 = col_character(), #>   X2 = col_character(), #>   X3 = col_character(), #>   X4 = col_character(), #>   X5 = col_double() #> ) #> Warning: 17 parsing failures. #> row col  expected     actual                                                      file #>   2  -- 5 columns 10 columns '/home/runner/work/_temp/Library/readr/extdata/epa78.txt' #>   3  -- 5 columns 6 columns  '/home/runner/work/_temp/Library/readr/extdata/epa78.txt' #>   4  -- 5 columns 3 columns  '/home/runner/work/_temp/Library/readr/extdata/epa78.txt' #>   5  -- 5 columns 8 columns  '/home/runner/work/_temp/Library/readr/extdata/epa78.txt' #>   6  -- 5 columns 8 columns  '/home/runner/work/_temp/Library/readr/extdata/epa78.txt' #> ... ... ......... .......... ......................................................... #> See problems(...) for more details. #>          X1     X2       X3     X4       X5 #>      <char> <char>   <char> <char>    <num> #>  1:    ALFA  ROMEO     ALFA  ROMEO 78010003 #>  2: ALFETTA     03       81      8       74 #>  3:  SPIDER   2000       01 SPIDER     2000 #>  4:     AMC    AMC 78020002   <NA>       NA #>  5: GREMLIN     03       79      9       79 #>  6:   PACER     04       89     11       89 #>  7:   PACER  WAGON       07     90       26 #>  8: CONCORD     04       88     12       90 #>  9: CONCORD  WAGON       07     91       30 #> 10: MATADOR  COUPE       05     97       14 #> 11: MATADOR  SEDAN       06    110       20 #> 12: MATADOR  WAGON       09    112       50 #> 13:   ASTON MARTIN    ASTON MARTIN 78040002 #> 14:   ASTON MARTIN    ASTON MARTIN 78040053 #> 15:    AUDI   AUDI 78050002   <NA>       NA #> 16:     FOX     03       84     11       84 #> 17:     FOX  WAGON       07     83       40 #> 18:    5000     04       90     15       90 #> 19:  AVANTI AVANTI 78065002   <NA>       NA #> 20:  AVANTI     II       02     75        8 #>          X1     X2       X3     X4       X5 (example_log <- read(readr_example(\"example.log\"))) #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   X1 = col_character(), #>   X2 = col_logical(), #>   X3 = col_character(), #>   X4 = col_character(), #>   X5 = col_character(), #>   X6 = col_double(), #>   X7 = col_double() #> ) #>              X1     X2                 X3                         X4 #>          <char> <lgcl>             <char>                     <char> #> 1: 172.21.13.45     NA Microsoft\\\\JohnDoe 08/Apr/2001:17:39:04 -0800 #> 2:    127.0.0.1     NA              frank 10/Oct/2000:13:55:36 -0700 #>                                                  X5    X6    X7 #>                                              <char> <num> <num> #> 1: GET /scripts/iisadmin/ism.dll?http/serv HTTP/1.0   200  3401 #> 2:                      GET /apache_pb.gif HTTP/1.0   200  2326 # There are different ways to specify columns for fixed-width files (fwf) # See ?read_fwf in package readr (fwf_sample <- read$fwf(readr_example(\"fwf-sample.txt\"),    col_positions =  fwf_cols(name = 20, state = 10, ssn = 12))) #> Rows: 3 Columns: 3 #> ── Column specification ──────────────────────────────────────────────────────── #>  #> chr (3): name, state, ssn #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #>             name  state          ssn #>           <char> <char>       <char> #> 1:    John Smith     WA 418-Y11-4111 #> 2: Mary Hartford     CA 319-Z19-4341 #> 3:    Evan Nolan     IL 219-532-c301  # Various examples of Excel datasets from readxl library(readxl) (xl <- read(readxl_example(\"datasets.xls\"))) #> New names: #> • `` -> `...1` #>      Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #>             <num>       <num>        <num>       <num>    <char> #>   1:          5.1         3.5          1.4         0.2    setosa #>   2:          4.9         3.0          1.4         0.2    setosa #>   3:          4.7         3.2          1.3         0.2    setosa #>   4:          4.6         3.1          1.5         0.2    setosa #>   5:          5.0         3.6          1.4         0.2    setosa #>  ---                                                             #> 146:          6.7         3.0          5.2         2.3 virginica #> 147:          6.3         2.5          5.0         1.9 virginica #> 148:          6.5         3.0          5.2         2.0 virginica #> 149:          6.2         3.4          5.4         2.3 virginica #> 150:          5.9         3.0          5.1         1.8 virginica (xl <- read(readxl_example(\"datasets.xlsx\"), sheet = \"mtcars\")) #> New names: #> • `` -> `...1` #>       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>     <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> #>  1:  21.0     6 160.0   110  3.90 2.620 16.46     0     1     4     4 #>  2:  21.0     6 160.0   110  3.90 2.875 17.02     0     1     4     4 #>  3:  22.8     4 108.0    93  3.85 2.320 18.61     1     1     4     1 #>  4:  21.4     6 258.0   110  3.08 3.215 19.44     1     0     3     1 #>  5:  18.7     8 360.0   175  3.15 3.440 17.02     0     0     3     2 #>  6:  18.1     6 225.0   105  2.76 3.460 20.22     1     0     3     1 #>  7:  14.3     8 360.0   245  3.21 3.570 15.84     0     0     3     4 #>  8:  24.4     4 146.7    62  3.69 3.190 20.00     1     0     4     2 #>  9:  22.8     4 140.8    95  3.92 3.150 22.90     1     0     4     2 #> 10:  19.2     6 167.6   123  3.92 3.440 18.30     1     0     4     4 #> 11:  17.8     6 167.6   123  3.92 3.440 18.90     1     0     4     4 #> 12:  16.4     8 275.8   180  3.07 4.070 17.40     0     0     3     3 #> 13:  17.3     8 275.8   180  3.07 3.730 17.60     0     0     3     3 #> 14:  15.2     8 275.8   180  3.07 3.780 18.00     0     0     3     3 #> 15:  10.4     8 472.0   205  2.93 5.250 17.98     0     0     3     4 #> 16:  10.4     8 460.0   215  3.00 5.424 17.82     0     0     3     4 #> 17:  14.7     8 440.0   230  3.23 5.345 17.42     0     0     3     4 #> 18:  32.4     4  78.7    66  4.08 2.200 19.47     1     1     4     1 #> 19:  30.4     4  75.7    52  4.93 1.615 18.52     1     1     4     2 #> 20:  33.9     4  71.1    65  4.22 1.835 19.90     1     1     4     1 #> 21:  21.5     4 120.1    97  3.70 2.465 20.01     1     0     3     1 #> 22:  15.5     8 318.0   150  2.76 3.520 16.87     0     0     3     2 #> 23:  15.2     8 304.0   150  3.15 3.435 17.30     0     0     3     2 #> 24:  13.3     8 350.0   245  3.73 3.840 15.41     0     0     3     4 #> 25:  19.2     8 400.0   175  3.08 3.845 17.05     0     0     3     2 #> 26:  27.3     4  79.0    66  4.08 1.935 18.90     1     1     4     1 #> 27:  26.0     4 120.3    91  4.43 2.140 16.70     0     1     5     2 #> 28:  30.4     4  95.1   113  3.77 1.513 16.90     1     1     5     2 #> 29:  15.8     8 351.0   264  4.22 3.170 14.50     0     1     5     4 #> 30:  19.7     6 145.0   175  3.62 2.770 15.50     0     1     5     6 #> 31:  15.0     8 301.0   335  3.54 3.570 14.60     0     1     5     8 #> 32:  21.4     4 121.0   109  4.11 2.780 18.60     1     1     4     2 #>       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb (xl <- read(readxl_example(\"datasets.xlsx\"), sheet = 3)) #> New names: #> • `` -> `...1` #>     weight      feed #>      <num>    <char> #>  1:    179 horsebean #>  2:    160 horsebean #>  3:    136 horsebean #>  4:    227 horsebean #>  5:    217 horsebean #>  6:    168 horsebean #>  7:    108 horsebean #>  8:    124 horsebean #>  9:    143 horsebean #> 10:    140 horsebean #> 11:    309   linseed #> 12:    229   linseed #> 13:    181   linseed #> 14:    141   linseed #> 15:    260   linseed #> 16:    203   linseed #> 17:    148   linseed #> 18:    169   linseed #> 19:    213   linseed #> 20:    257   linseed #> 21:    244   linseed #> 22:    271   linseed #> 23:    243   soybean #> 24:    230   soybean #> 25:    248   soybean #> 26:    327   soybean #> 27:    329   soybean #> 28:    250   soybean #> 29:    193   soybean #> 30:    271   soybean #> 31:    316   soybean #> 32:    267   soybean #> 33:    199   soybean #> 34:    171   soybean #> 35:    158   soybean #> 36:    248   soybean #> 37:    423 sunflower #> 38:    340 sunflower #> 39:    392 sunflower #> 40:    339 sunflower #> 41:    341 sunflower #> 42:    226 sunflower #> 43:    320 sunflower #> 44:    295 sunflower #> 45:    334 sunflower #> 46:    322 sunflower #> 47:    297 sunflower #> 48:    318 sunflower #> 49:    325  meatmeal #> 50:    257  meatmeal #> 51:    303  meatmeal #> 52:    315  meatmeal #> 53:    380  meatmeal #> 54:    153  meatmeal #> 55:    263  meatmeal #> 56:    242  meatmeal #> 57:    206  meatmeal #> 58:    344  meatmeal #> 59:    258  meatmeal #> 60:    368    casein #> 61:    390    casein #> 62:    379    casein #> 63:    260    casein #> 64:    404    casein #> 65:    318    casein #> 66:    352    casein #> 67:    359    casein #> 68:    216    casein #> 69:    222    casein #> 70:    283    casein #> 71:    332    casein #>     weight      feed # Accomodate a column with disparate types via col_type = \"list\" (clip <- read(readxl_example(\"clippy.xls\"), col_types = c(\"text\", \"list\"))) #> New names: #> • `` -> `...1` #>                    name      value #>                  <char>     <list> #> 1:                 Name     Clippy #> 2:              Species  paperclip #> 3: Approx date of death 2007-01-01 #> 4:      Weight in grams        0.9 (clip <- read(readxl_example(\"clippy.xlsx\"), col_types = c(\"text\", \"list\"))) #> New names: #> • `` -> `...1` #>                    name      value #>                  <char>     <list> #> 1:                 Name     Clippy #> 2:              Species  paperclip #> 3: Approx date of death 2007-01-01 #> 4:      Weight in grams        0.9 tibble::deframe(clip) #> $Name #> [1] \"Clippy\" #>  #> $Species #> [1] \"paperclip\" #>  #> $`Approx date of death` #> [1] \"2007-01-01 UTC\" #>  #> $`Weight in grams` #> [1] 0.9 #>  # Read from a specific range in a sheet (xl <- read(readxl_example(\"datasets.xlsx\"), range = \"mtcars!B1:D5\")) #> New names: #> • `` -> `...1` #>      cyl  disp    hp #>    <num> <num> <num> #> 1:     6   160   110 #> 2:     6   160   110 #> 3:     4   108    93 #> 4:     6   258   110 (deaths <- read(readxl_example(\"deaths.xls\"), range = cell_rows(5:15))) #> New names: #> • `` -> `...1` #>                   Name Profession   Age Has kids Date of birth Date of death #>                 <char>     <char> <num>   <lgcl>        <POSc>        <POSc> #>  1:        David Bowie   musician    69     TRUE    1947-01-08    2016-01-10 #>  2:      Carrie Fisher      actor    60     TRUE    1956-10-21    2016-12-27 #>  3:        Chuck Berry   musician    90     TRUE    1926-10-18    2017-03-18 #>  4:        Bill Paxton      actor    61     TRUE    1955-05-17    2017-02-25 #>  5:             Prince   musician    57     TRUE    1958-06-07    2016-04-21 #>  6:       Alan Rickman      actor    69    FALSE    1946-02-21    2016-01-14 #>  7: Florence Henderson      actor    82     TRUE    1934-02-14    2016-11-24 #>  8:         Harper Lee     author    89    FALSE    1926-04-28    2016-02-19 #>  9:      Zsa Zsa Gábor      actor    99     TRUE    1917-02-06    2016-12-18 #> 10:     George Michael   musician    53    FALSE    1963-06-25    2016-12-25 (deaths <- read(readxl_example(\"deaths.xlsx\"), range = cell_rows(5:15))) #> New names: #> • `` -> `...1` #>                   Name Profession   Age Has kids Date of birth Date of death #>                 <char>     <char> <num>   <lgcl>        <POSc>        <POSc> #>  1:        David Bowie   musician    69     TRUE    1947-01-08    2016-01-10 #>  2:      Carrie Fisher      actor    60     TRUE    1956-10-21    2016-12-27 #>  3:        Chuck Berry   musician    90     TRUE    1926-10-18    2017-03-18 #>  4:        Bill Paxton      actor    61     TRUE    1955-05-17    2017-02-25 #>  5:             Prince   musician    57     TRUE    1958-06-07    2016-04-21 #>  6:       Alan Rickman      actor    69    FALSE    1946-02-21    2016-01-14 #>  7: Florence Henderson      actor    82     TRUE    1934-02-14    2016-11-24 #>  8:         Harper Lee     author    89    FALSE    1926-04-28    2016-02-19 #>  9:      Zsa Zsa Gábor      actor    99     TRUE    1917-02-06    2016-12-18 #> 10:     George Michael   musician    53    FALSE    1963-06-25    2016-12-25 (type_me <- read(readxl_example(\"type-me.xls\"), sheet = \"logical_coercion\",   col_types = c(\"logical\", \"text\"))) #> New names: #> • `` -> `...1` #> Warning: Expecting logical in A5 / R5C1: got a date #> Warning: Expecting logical in A8 / R8C1: got 'cabbage' #>     maybe boolean?                      description #>             <lgcl>                           <char> #>  1:             NA                            empty #>  2:          FALSE                      0 (numeric) #>  3:           TRUE                      1 (numeric) #>  4:             NA                         datetime #>  5:           TRUE                     boolean true #>  6:          FALSE                    boolean false #>  7:             NA                        \"cabbage\" #>  8:           TRUE                the string \"true\" #>  9:          FALSE                   the letter \"F\" #> 10:          FALSE \"False\" preceded by single quote (type_me <- read(readxl_example(\"type-me.xlsx\"), sheet = \"numeric_coercion\",   col_types = c(\"numeric\", \"text\"))) #> New names: #> • `` -> `...1` #> Warning: Coercing boolean to numeric in A3 / R3C1 #> Warning: Coercing boolean to numeric in A4 / R4C1 #> Warning: Expecting numeric in A5 / R5C1: got a date #> Warning: Coercing text to numeric in A6 / R6C1: '123456' #> Warning: Expecting numeric in A8 / R8C1: got 'cabbage' #>    maybe numeric?         explanation #>             <num>              <char> #> 1:             NA               empty #> 2:              1        boolean true #> 3:              0       boolean false #> 4:          40534            datetime #> 5:         123456 the string \"123456\" #> 6:         123456   the number 123456 #> 7:             NA           \"cabbage\" (type_me <- read(readxl_example(\"type-me.xls\"), sheet = \"date_coercion\",   col_types = c(\"date\", \"text\"))) #> New names: #> • `` -> `...1` #> Warning: Expecting date in A5 / R5C1: got boolean #> Warning: Expecting date in A6 / R6C1: got 'cabbage' #> Warning: Coercing numeric to date in A7 / R7C1 #> Warning: Coercing numeric to date in A8 / R8C1 #>      maybe a datetime?          explanation #>                 <POSc>               <char> #> 1:                <NA>                empty #> 2: 2016-05-23 00:00:00     date only format #> 3: 2016-04-28 11:30:00 date and time format #> 4:                <NA>         boolean true #> 5:                <NA>            \"cabbage\" #> 6: 1904-01-05 07:12:00        4.3 (numeric) #> 7: 2012-01-02 00:00:00      another numeric (type_me <- read(readxl_example(\"type-me.xlsx\"), sheet = \"text_coercion\",   col_types = c(\"text\", \"text\"))) #> New names: #> • `` -> `...1` #>        text     explanation #>      <char>          <char> #> 1:     <NA>           empty #> 2:  cabbage       \"cabbage\" #> 3:     TRUE    boolean true #> 4:      1.3         numeric #> 5:    41175        datetime #> 6: 36436153 another numeric (xl <- read(readxl_example(\"geometry.xls\"), col_names = FALSE)) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #>      ...1   ...2   ...3 #>    <char> <char> <char> #> 1:     B3     C3     D3 #> 2:     B4     C4     D4 #> 3:     B5     C5     D5 #> 4:     B6     C6     D6 (xl <- read(readxl_example(\"geometry.xlsx\"), range = cell_rows(4:8))) #>        B4     C4     D4 #>    <char> <char> <char> #> 1:     B5     C5     D5 #> 2:     B6     C6     D6 #> 3:   <NA>   <NA>   <NA> #> 4:   <NA>   <NA>   <NA>  # Various examples from haven library(haven) haven_example <- function(path)   system.file(\"examples\", path, package = \"haven\", mustWork = TRUE) (iris2 <- read(haven_example(\"iris.dta\"))) # Stata v. 8-14 #>      sepallength sepalwidth petallength petalwidth   species #>            <num>      <num>       <num>      <num>    <char> #>   1:         5.1        3.5         1.4        0.2    setosa #>   2:         4.9        3.0         1.4        0.2    setosa #>   3:         4.7        3.2         1.3        0.2    setosa #>   4:         4.6        3.1         1.5        0.2    setosa #>   5:         5.0        3.6         1.4        0.2    setosa #>  ---                                                         #> 146:         6.7        3.0         5.2        2.3 virginica #> 147:         6.3        2.5         5.0        1.9 virginica #> 148:         6.5        3.0         5.2        2.0 virginica #> 149:         6.2        3.4         5.4        2.3 virginica #> 150:         5.9        3.0         5.1        1.8 virginica (iris2 <- read(haven_example(\"iris.sav\"))) # SPSS, TODO: labelled -> factor? #>      Sepal.Length Sepal.Width Petal.Length Petal.Width          Species #>             <num>       <num>        <num>       <num> <haven_labelled> #>   1:          5.1         3.5          1.4         0.2                1 #>   2:          4.9         3.0          1.4         0.2                1 #>   3:          4.7         3.2          1.3         0.2                1 #>   4:          4.6         3.1          1.5         0.2                1 #>   5:          5.0         3.6          1.4         0.2                1 #>  ---                                                                    #> 146:          6.7         3.0          5.2         2.3                3 #> 147:          6.3         2.5          5.0         1.9                3 #> 148:          6.5         3.0          5.2         2.0                3 #> 149:          6.2         3.4          5.4         2.3                3 #> 150:          5.9         3.0          5.1         1.8                3 (pbc <- read(data_example(\"pbc.por\"))) # SPSS, POR format #>          AGE   ALB ALKPHOS ASCITES  BILI  CHOL EDEMA EDTRT HEPMEG  TIME #>        <num> <num>   <num>   <num> <num> <num> <num> <num>  <num> <num> #>   1: 58.7652  2.60  1718.0       1  14.5   261     1   1.0      1   400 #>   2: 56.4463  4.14  7394.8       0   1.1   302     0   0.0      1  4500 #>   3: 70.0726  3.48   516.0       0   1.4   176     1   0.5      0  1012 #>   4: 54.7406  2.54  6121.8       0   1.8   244     1   0.5      1  1925 #>   5: 38.1054  3.53   671.0       0   3.4   279     0   0.0      1  1504 #>  ---                                                                    #> 414: 67.0000  2.96    -9.0      -9   1.2    -9     0   0.0     -9   681 #> 415: 39.0000  3.83    -9.0      -9   0.9    -9     0   0.0     -9  1103 #> 416: 57.0000  3.42    -9.0      -9   1.6    -9     0   0.0     -9  1055 #> 417: 58.0000  3.75    -9.0      -9   0.8    -9     0   0.0     -9   691 #> 418: 53.0000  3.29    -9.0      -9   0.7    -9     0   0.0     -9   976 #>      PLATELET PROTIME   SEX   SGOT SPIDERS STAGE STATUS   TRT  TRIG COPPER #>         <num>   <num> <num>  <num>   <num> <num>  <num> <num> <num>  <num> #>   1:      190    12.2     1 137.95       1     4      1     1   172    156 #>   2:      221    10.6     1 113.52       1     3      0     1    88     54 #>   3:      151    12.0     0  96.10       0     4      1     1    55    210 #>   4:      183    10.3     1  60.63       1     4      1     1    92     64 #>   5:      136    10.9     1 113.15       1     3      0     2    72    143 #>  ---                                                                       #> 414:      174    10.9    -9  -9.00      -9    -9      1    -9    -9     -9 #> 415:      180    11.2    -9  -9.00      -9    -9      0    -9    -9     -9 #> 416:      143     9.9    -9  -9.00      -9    -9      0    -9    -9     -9 #> 417:      269    10.4    -9  -9.00      -9    -9      0    -9    -9     -9 #> 418:      350    10.6    -9  -9.00      -9    -9      0    -9    -9     -9 (iris2 <- read$sas(haven_example(\"iris.sas7bdat\"))) # SAS file #>      Sepal_Length Sepal_Width Petal_Length Petal_Width Species #>             <num>       <num>        <num>       <num>  <char> #>   1:          5.1         3.5          1.4         0.2  setosa #>   2:          4.9         3.0          1.4         0.2  setosa #>   3:          4.7         3.2          1.3         0.2  setosa #>   4:          4.6         3.1          1.5         0.2  setosa #>   5:          5.0         3.6          1.4         0.2  setosa #>  ---                                                           #> 146:          6.7         3.0          5.2         2.3  virgin #> 147:          6.3         2.5          5.0         1.9  virgin #> 148:          6.5         3.0          5.2         2.0  virgin #> 149:          6.2         3.4          5.4         2.3  virgin #> 150:          5.9         3.0          5.1         1.8  virgin (afalfa <- read(data_example(\"afalfa.xpt\"))) # SAS transport file #>        POP SAMPLE   REP SEEDWT HARV1 HARV2 #>     <char>  <num> <num>  <num> <num> <num> #>  1:    min      0     1     64 171.7 180.3 #>  2:    min      1     1     54 138.2 150.7 #>  3:    min      2     1     40 145.6 129.1 #>  4:    min      3     1     45 170.4 191.2 #>  5:    min      4     1     64 124.8 172.6 #>  6:    MAX      5     1     75 179.0 235.3 #>  7:    MAX      6     1     45 166.3 173.9 #>  8:    MAX      7     1     63 169.7 155.8 #>  9:    MAX      8     1     65 192.9 177.6 #> 10:    MAX      9     1     59 185.8 179.2 #> 11:    min      0     2     59 158.8 139.7 #> 12:    min      1     2     46 163.7 150.0 #> 13:    min      2     2     42 120.6 131.1 #> 14:    min      3     2     38 193.1 195.4 #> 15:    min      4     2     54 171.5 167.6 #> 16:    MAX      5     2     59 181.4 152.9 #> 17:    MAX      6     2     60 165.3 167.5 #> 18:    MAX      7     2     63 163.9 158.0 #> 19:    MAX      8     2     70 152.5 150.2 #> 20:    MAX      9     2     62 173.5 190.7 #> 21:    min      0     3     60 147.9 164.9 #> 22:    min      1     3     42 181.3 151.5 #> 23:    min      2     3     35 124.3 134.4 #> 24:    min      3     3     47 174.8 200.8 #> 25:    min      4     3     59 167.8 178.3 #> 26:    MAX      5     3     57 193.4 183.5 #> 27:    MAX      6     3     60 150.7 147.1 #> 28:    MAX      7     3     59 142.5 148.7 #> 29:    MAX      8     3     59 176.4 204.8 #> 30:    MAX      9     3     70 144.2 143.8 #> 31:    min      0     4     61 148.4 168.8 #> 32:    min      1     4     52 164.9 158.6 #> 33:    min      2     4     43 141.2 158.1 #> 34:    min      3     4     49 176.5 208.3 #> 35:    min      4     4     60 177.5 137.1 #> 36:    MAX      5     4     59 174.1 160.2 #> 37:    MAX      6     4     48 155.5 185.8 #> 38:    MAX      7     4     61 186.7 157.7 #> 39:    MAX      8     4     64 162.4 179.4 #> 40:    MAX      9     4     71 141.0 161.5 #>        POP SAMPLE   REP SEEDWT HARV1 HARV2  # Note that where completion is available, you have a completion list of file # format after typing read$<tab> # }"},{"path":"https://www.sciviews.org/data.io/reference/read_write_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Define default read/write options and add items to it — read_write_option","title":"Define default read/write options and add items to it — read_write_option","text":"Define functions read() write() must call import export data different types (formats).","code":""},{"path":"https://www.sciviews.org/data.io/reference/read_write_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define default read/write options and add items to it — read_write_option","text":"","code":"read_write_option(new_type)"},{"path":"https://www.sciviews.org/data.io/reference/read_write_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define default read/write options and add items to it — read_write_option","text":"new_type data.frame four columns: type, read_fun, read_header write_fun containing single character string NA. type usual extension type file, e.g., png PNG images, read_fun, read_header write_fun character strings \"pkg::fun\" format (\"pkg\" package containing function \"fun\" function name), just \"fun\" function visible search path.","code":""},{"path":"https://www.sciviews.org/data.io/reference/read_write_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define default read/write options and add items to it — read_write_option","text":"data.frame known formats returned invisibly. data.frame also saved read_write`` option, can retrieved directly getOption(\"read_write\")`.","code":""},{"path":[]},{"path":"https://www.sciviews.org/data.io/reference/read_write_option.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Define default read/write options and add items to it — read_write_option","text":"Philippe Grosjean phgrosjean@sciviews.org","code":""},{"path":"https://www.sciviews.org/data.io/reference/read_write_option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define default read/write options and add items to it — read_write_option","text":"","code":"# The default options (read_write_option()) #> # A tibble: 32 × 5 #>    type  read_fun             read_header         write_fun              comment #>    <chr> <chr>                <chr>               <chr>                  <chr>   #>  1 csv   readr::read_csv      data.io::hread_text readr::write_csv       comma … #>  2 csv2  readr::read_csv2     data.io::hread_text NA                     semico… #>  3 xlcsv readr::read_csv      data.io::hread_text readr::write_excel_csv write … #>  4 tsv   readr::read_tsv      data.io::hread_text readr::write_tsv       tab se… #>  5 fwf   readr::read_fwf      data.io::hread_text NA                     fixed … #>  6 log   readr::read_log      NA                  NA                     standa… #>  7 rds   readr::read_rds      NA                  readr::write_rds       R data… #>  8 txt   readr::read_file     NA                  readr::write_file      text f… #>  9 raw   readr::read_file_raw NA                  NA                     binary… #> 10 ssv   readr::read_table    data.io::hread_text NA                     space … #> # ℹ 22 more rows # To add a new type: tail(read_write_option(data.frame(type = \"png\", read_fun = \"png::readPNG\",   read_header = NA, write_fun = \"png::writePNG\", comment = \"PNG image\"))) #> # A tibble: 6 × 5 #>   type     read_fun        read_header write_fun        comment                  #>   <chr>    <chr>           <chr>       <chr>            <chr>                    #> 1 sas7bdat haven::read_sas NA          haven::write_sas SAS format (sas7bdat)    #> 2 sav      haven::read_sav NA          haven::write_sav SPSS .sav format         #> 3 zsav     haven::read_sav NA          haven::write_sav SPSS .zsav format        #> 4 por      haven::read_por NA          NA               SPSS .por format         #> 5 xpt      haven::read_xpt NA          haven::write_xpt SPSS transport format (… #> 6 png      png::readPNG    NA          png::writePNG    PNG image"},{"path":"https://www.sciviews.org/data.io/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. Hmisc label, label<-","code":""},{"path":"https://www.sciviews.org/data.io/reference/relative_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate path relative to a reference directory — relative_path","title":"Calculate path relative to a reference directory — relative_path","text":"normalizing file dir, try find common ancestor directory build path file relative dir.","code":""},{"path":"https://www.sciviews.org/data.io/reference/relative_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate path relative to a reference directory — relative_path","text":"","code":"relative_path(file, dir = getwd())"},{"path":"https://www.sciviews.org/data.io/reference/relative_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate path relative to a reference directory — relative_path","text":"file single string path file directory transform relative. dir single string \"reference\" directory (default, directory provided getwd().","code":""},{"path":"https://www.sciviews.org/data.io/reference/relative_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate path relative to a reference directory — relative_path","text":"single character string relative path, file unmodified file totally unrelated dir.","code":""},{"path":[]},{"path":"https://www.sciviews.org/data.io/reference/relative_path.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate path relative to a reference directory — relative_path","text":"Philippe Grosjean phgrosjean@sciviews.org","code":""},{"path":"https://www.sciviews.org/data.io/reference/relative_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate path relative to a reference directory — relative_path","text":"","code":"relative_path(\"/Users/me/project/file.txt\", \"/Users/me/project\") #> [1] \"file.txt\" relative_path(\"/Users/me/project/subdir/file.txt\", \"/Users/me/project\") #> [1] \"subdir/file.txt\" relative_path(\"/Users/me/file.txt\", \"/Users/me/project\") #> [1] \"../file.txt\" relative_path(\"/Users/me/subdir/file.txt\", \"/Users/me/project\") #> [1] \"../subdir/file.txt\" relative_path(\"/Users/file.txt\", \"/Users/me/project\") #> [1] \"../../file.txt\" relative_path(\"/Users/subdir1/subdir2/file.txt\", \"/Users/me/project\") #> [1] \"../../subdir1/subdir2/file.txt\" relative_path(\"/Unrelated/file.txt\", \"/Users/me/project\") #> [1] \"/Unrelated/file.txt\" # \\donttest{ relative_path(\"file.txt\", \"/Users/me/project\") #> [1] \"file.txt\" relative_path(\"~/file.txt\", \"/Users/me/project\") #> [1] \"~/file.txt\" relative_path(\"./file.txt\", \"/Users/me/project\") #> [1] \"./file.txt\" relative_path(file.path(getwd(), \"data.io\", \"file.txt\")) #> [1] \"data.io/file.txt\" # }"},{"path":"https://www.sciviews.org/data.io/reference/urchin_bio.html","id":null,"dir":"Reference","previous_headings":"","what":"Sea urchins biometry — urchin_bio","title":"Sea urchins biometry — urchin_bio","text":"Various measurement Paracentrotus lividus sea urchins providing fishery (Brittany, France), sea urchins farm Normandy.","code":""},{"path":"https://www.sciviews.org/data.io/reference/urchin_bio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sea urchins biometry — urchin_bio","text":"","code":"urchin_bio"},{"path":"https://www.sciviews.org/data.io/reference/urchin_bio.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sea urchins biometry — urchin_bio","text":"data frame 19 variables: origin factor two levels: \"Culture\", \"Fishery\". diameter1 Diameter (mm) test measured ambitus (widest part). diameter2 second diameter (mm) measured ambitus, perpendicular first one. idea calculate average diameter1 diameter2 order eliminate effect possible slight departure nearly circular ambitus. height height test (mm), measured month anus, thus, orthogonally two diameters. buoyant_weight Weight (g) sea urchin immersed seawater. weight Weight (g) whole animal. solid_parts Weight (g) animal draining coelomic fluid test. integuments Weight (g) sea urchin taking whole content test (coelomic fluid, digestive tract gonads. dry_integuments Dry weight (g) integuments. digestive_tract Weight (g) digestive tract, including content. dry_digestive_tract Dry weight (g) digestive tract content. gonads Weight (g) gonads. dry_gonads Dry weight (g) gonads. skeleton Weight skeleton (g), calculated sum lantern + test + spines. lantern Dry weight (g) lantern (jaw teeth sea urchin). test Dry weight (g) calcareous part test. spines Dry weight (g) calcareous parts spines. maturity Gonads maturity index (integer), measured scale 3 states: state 0 means gonad absent spent, state 1 means growing mature, state 2 means gonad mature. treated circular variable, since reproductive cycle 0 -> 1 -> 2 -> 0 (spawning). sex possible, sex animal determined visual inspection gonads (factor levels \"F\" \"M\"). stratified sample performed make sure size classes (5 5 mm test diameter) sub-population equally represented dataset. Hence, size weight-classes distributions among population studied dataset. However, data suitable explore allometric relationships body measurements /body parts sea urchins whole size range. details farming sea urchins, see .","code":""},{"path":"https://www.sciviews.org/data.io/reference/urchin_growth.html","id":null,"dir":"Reference","previous_headings":"","what":"Sea urchins growth — urchin_growth","title":"Sea urchins growth — urchin_growth","text":"Size age cohort farmed sea urchins, Paracentrotus lividus.","code":""},{"path":"https://www.sciviews.org/data.io/reference/urchin_growth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sea urchins growth — urchin_growth","text":"","code":"urchin_growth"},{"path":"https://www.sciviews.org/data.io/reference/urchin_growth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sea urchins growth — urchin_growth","text":"object class data.frame 7024 rows 3 columns.","code":""},{"path":"https://www.sciviews.org/data.io/reference/urchin_growth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sea urchins growth — urchin_growth","text":"cohort farmed sea urchins measured various time intervals, observations completely independent : individuals repeatedly measured . sea urchins individually tagged, possible track one measurement . However, whole dataset representative growth, spreading growth single cohort. Also, mortality derived number measurements made time period, since individuals still alive measured (sub-sampling).","code":""},{"path":"https://www.sciviews.org/data.io/reference/urchin_growth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sea urchins growth — urchin_growth","text":"","code":"library(ggplot2) ggplot(urchin_growth, aes(age, diameter)) +   geom_jitter(alpha = 0.2) +   xlab(label(urchin_growth$age, units = TRUE)) +   ylab(label(urchin_growth$diameter, units = TRUE)) +   ggtitle(\"Growth of a cohort of sea urchins\")"},{"path":"https://www.sciviews.org/data.io/reference/write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write data from R in files in different formats — write","title":"Write data from R in files in different formats — write","text":"Write R data file, different formats.","code":""},{"path":"https://www.sciviews.org/data.io/reference/write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write data from R in files in different formats — write","text":"","code":"write(   data,   file = \"data\",   ncolumns = if (is.character(data)) 1 else 5,   append = FALSE,   sep = \" \",   type = NULL,   fun_list = NULL,   x,   ... )  # S3 method for write_function_subset .DollarNames(x, pattern = \"\")"},{"path":"https://www.sciviews.org/data.io/reference/write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write data from R in files in different formats — write","text":"data object write file. accepted class depends delegated function expects (many cases, data.frame tibble just fine). type provided, data.frame suitable atomic vector can provided. Give matrix instead, want write tabular data, provide type = \"txt\" instance. file path file write . type provide, connection, character string naming file write . \"\"``, print standard output connection. \"|cmd\", output piped command given cmd`. ncolumns number columns write data type provided, -passed. append TRUE type provided, data appended connection. sep string used separate columns. Using sep = \"\\t\" gives tab delimited output; default \" \" type provide, default provided delegated function parameter present . type type (format) data read. fun_list table correspondence types, read, write functions. x data=, compatibility base::write(). Please, use data= x= time, error generated. ... arguments passed write function, type explicitly provided. pattern regular expression list matching names.","code":""},{"path":"https://www.sciviews.org/data.io/reference/write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write data from R in files in different formats — write","text":"data returned invisibly (contrary base::write() returns NULL).","code":""},{"path":"https://www.sciviews.org/data.io/reference/write.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write data from R in files in different formats — write","text":"function designed fully compatible base::write(), allowing specify type also, get interesting behavior case. Hence, type provided, either write(type = ...), write$...(), default code used plain text file wit fields separated spaces (default) written. type provided, exportation delegated specific functions (see data_types()) write data different formats.","code":""},{"path":[]},{"path":"https://www.sciviews.org/data.io/reference/write.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write data from R in files in different formats — write","text":"Philippe Grosjean phgrosjean@sciviews.org","code":""},{"path":"https://www.sciviews.org/data.io/reference/write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write data from R in files in different formats — write","text":"","code":"# Always specify type to delegate to more sophisticated functions # (type = NULL explicitly indicated meaning: \"guess from file extension\") urchin <- read(\"urchin_bio\", package = \"data.io\") write(urchin, \"urchin_temporary.csv\", type = NULL) # To use a format more easily readable by Excel write(urchin, \"urchin_temporary.csv\", type = \"xlcsv\") # ... equivalently (and more compact) write$xlcsv(urchin, \"urchin_temporary.csv\") # Tidy up unlink(\"urchin_temporary.csv\")  # Write in Excel format write$xlsx(urchin, \"urchin_temporary.xlsx\") # Tidy up unlink(\"urchin_temporary.xlsx\")  # Use base::write() code to output atomic vectors (and matices) in text files # when you don't specify type= mat1 <- matrix(1:12, nrow = 4) # To get a similar presentation in the file, you have to do: write(t(mat1), \"my_temporary_data.txt\", ncolumns = 3) file.show(\"my_temporary_data.txt\") # Tidy up unlink(\"my_temporary_data.txt\") rm(mat1)"},{"path":"https://www.sciviews.org/data.io/reference/zooplankton.html","id":null,"dir":"Reference","previous_headings":"","what":"Zooplankton image analysis — zooplankton","title":"Zooplankton image analysis — zooplankton","text":"Various features measured image analysis package zooimage ImageJ samples zooplankton originating Tulear, Madagascar. taxonomic classification also provided class variable.","code":""},{"path":"https://www.sciviews.org/data.io/reference/zooplankton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zooplankton image analysis — zooplankton","text":"","code":"zooplankton"},{"path":"https://www.sciviews.org/data.io/reference/zooplankton.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Zooplankton image analysis — zooplankton","text":"data frame 19 variables: ecd \"equivalent circular diameter\", diameter circle area particle (mm). area area particle image (mm^2). perimeter perimeter particle (mm). feret Feret diameter, , largest measured diameter particle image (mm). major major axis ellipsoid matching particle (mm). minor minor axis ellipsoid (mm). mean mean value gray levels calibrated optical density (OD), thus, unitless. mode frequent gray level particle OD. min transparent part OD. max opaque part OD. std_dev standard deviation OD distribution inside particle. range Transparency range max - min. size mean diameter particle, average minor major (mm). aspect Aspect ratio particle minor/major. elongation area divided area circle perimeter particle. compactness sqrt((4/pi) * area) / major. transparency 1 - (ecd - size). circularity 4pi(area / perimeter^2). density Density integrate surface covered gray level, .e. O.D., inside particle. class classification particle. 17 classes made. Note Copepods Calanoid + Cyclopoid + Harpactivoid + Poecilostomatoid represent abundant zooplankton sea. typical training set used train plankton classifier machine learning algorithms. Organisms originate various samples (different seasons, depth, etc. take variability account). However, abundance different classes match abundance found sample, .e., rare classes -represented training set. zooplankton classes present dataset. Full data also contains classes phytoplankton, marine snow, etc. Take care several variables correlated!","code":""},{"path":"https://www.sciviews.org/data.io/reference/zooplankton.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Zooplankton image analysis — zooplankton","text":"Grosjean, Ph & K. Denis (2004). Supervised classification images, applied plankton samples using R ZooImage. Chap.12 Data Mining Applications R. Zhao, Y. & Y. Cen (eds). Elsevier. Pp 331-365. https://doi.org/10.1016/C2012-0-00333-X.","code":""},{"path":"https://www.sciviews.org/data.io/reference/zooplankton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zooplankton image analysis — zooplankton","text":"","code":"table(zooplankton$class) #>  #>          Annelid  Appendicularian         Calanoid      Chaetognath  #>               50               36              288               51  #>         Cirriped       Cladoceran        Cnidarian        Cyclopoid  #>               22               50               22               50  #>          Decapod    Egg_elongated        Egg_round             Fish  #>              126               50               49               50  #>        Gastropod     Harpacticoid    Malacostracan Poecilostomatoid  #>               50               39              121              158  #>          Protist  #>               50  library(ggplot2) ggplot(zooplankton, aes(circularity, transparency, color = class)) +   geom_point()"},{"path":"https://www.sciviews.org/data.io/news/index.html","id":"dataio-151","dir":"Changelog","previous_headings":"","what":"data.io 1.5.1","title":"data.io 1.5.1","text":"License changed MIT better wider use.","code":""},{"path":"https://www.sciviews.org/data.io/news/index.html","id":"dataio-150","dir":"Changelog","previous_headings":"","what":"data.io 1.5.0","title":"data.io 1.5.0","text":".DollarNames() implemented read() write() function, completion list acceptable types. as_dataframe.dataframe() as_dataframe.list(), argument validate= replaced .name.repair= according changes made {tibble} 3.0 validate= argument defunct now. {palmerpenguins} penguins penguins_raw data sets included (en fr versions). code read() patched data(penguins) loads penguins penguins_raw, data(penguins_raw) produces error (sic!) {datasets} ChickWeight, failthful, ToothGrowth now translated (en fr versions). data sets Penicillin sleepstudy {lme4} now translated (en fr versions). data sets babynames, applicants, births, lifetables {babynames} now translated (en fr versions).","code":""},{"path":"https://www.sciviews.org/data.io/news/index.html","id":"dataio-141","dir":"Changelog","previous_headings":"","what":"data.io 1.4.1","title":"data.io 1.4.1","text":"conflict attributing units {units} package. , package loaded, units(x) <- value x numeric became unitsobject treated {units}. don’t want , , previous code replaced attr(x, \"units\") <- value avoid clash.","code":""},{"path":"https://www.sciviews.org/data.io/news/index.html","id":"dataio-140","dir":"Changelog","previous_headings":"","what":"data.io 1.4.0","title":"data.io 1.4.0","text":"Dependency {svBase} added. Now default_dtx() function used output data frame object user-preferred class (data.frame, data.table tibble tbl_df) read(). dataframe object class deprecated. Consequently, read() output dataframe objects as_dataframe() is_dataframe() similar functions also deprecated. as_dataframe= argument read() also deprecated now. now list completion read$<tab> write$<tab>. read() function can now download file directly types (previously, functions accepted internally, like readr::read_csv() readxl::read_xls() instance). cache_file= argument allows define file cache download. file exists, data redownloaded , except force = TRUE.","code":""},{"path":"https://www.sciviews.org/data.io/news/index.html","id":"dataio-131","dir":"Changelog","previous_headings":"","what":"data.io 1.3.1","title":"data.io 1.3.1","text":"Example using .csv.tar .csv.tar.gz eliminated recent readr::read_csv() function seem handle Tar archives anymore (observed {readr} version 2.1.2).","code":""},{"path":"https://www.sciviews.org/data.io/news/index.html","id":"dataio-130","dir":"Changelog","previous_headings":"","what":"data.io 1.3.0","title":"data.io 1.3.0","text":".dataframe(table_object) broken ‘tibble’ 3.0.0. Now use different code convert table objects tibble/dataframe. Rework sources ‘pkgdown’ web site added. new argument data= synonym file= added. makes sense datasets loaded packages. First argument write() now named data= coherence. mauna_loa dataset, calls tidyr::gather() (deprecated) replaced tidyr::pivot_longer().","code":""},{"path":"https://www.sciviews.org/data.io/news/index.html","id":"dataio-122","dir":"Changelog","previous_headings":"","what":"data.io 1.2.2","title":"data.io 1.2.2","text":"example iris_sidecar.csv.R wrongly referred data::read() instead data.io::read().","code":""},{"path":"https://www.sciviews.org/data.io/news/index.html","id":"dataio-121","dir":"Changelog","previous_headings":"","what":"data.io 1.2.1","title":"data.io 1.2.1","text":"French translation trees dataset as_labelled() argument.","code":""},{"path":"https://www.sciviews.org/data.io/news/index.html","id":"dataio-120","dir":"Changelog","previous_headings":"","what":"data.io 1.2.0","title":"data.io 1.2.0","text":"now possible specify default language use read() option data.io-lang. lang lang_encoding now recorded attributes comment imported object.","code":""},{"path":"https://www.sciviews.org/data.io/news/index.html","id":"dataio-110","dir":"Changelog","previous_headings":"","what":"data.io 1.1.0","title":"data.io 1.1.0","text":"basic version write() now available. data_types() function added easily get information data types can used read() write(). Description added read_write options.","code":""},{"path":"https://www.sciviews.org/data.io/news/index.html","id":"dataio-101","dir":"Changelog","previous_headings":"","what":"data.io 1.0.1","title":"data.io 1.0.1","text":"Bug corrected: forgot change data -> data.io read_write options.","code":""},{"path":"https://www.sciviews.org/data.io/news/index.html","id":"dataio-100","dir":"Changelog","previous_headings":"","what":"data.io 1.0.0","title":"data.io 1.0.0","text":"First version package Github.","code":""}]
